{"ast":null,"code":"var _jsxFileName = \"D:\\\\reactDAPP\\\\client\\\\src\\\\App.js\";\nimport React, { Component } from \"react\";\nimport Authentication from \"./contracts/Authentication.json\";\nimport Transaction from \"./contracts/Transaction.json\";\nimport getWeb3 from \"./getWeb3\";\nimport Dashboard from \"./components/Dashboard\";\nimport 'semantic-ui-css/semantic.min.css';\n\nclass App extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      web3: null,\n      account: null,\n      contract1: null,\n      contract2: null\n    };\n\n    this.componentDidMount = async () => {\n      try {\n        // Get network provider and web3 instance.\n        const web3 = await getWeb3(); // Use web3 to get the user's accounts.\n\n        const accounts = await web3.eth.getAccounts(); // Get the Authentication contract instance.\n\n        const networkId1 = await web3.eth.net.getId();\n        const deployedNetwork1 = Authentication.networks[networkId1];\n        const contractA = new web3.eth.Contract(Authentication.abi, deployedNetwork1 && deployedNetwork1.address); // Get the Transaction contract instance.\n\n        const networkId2 = await web3.eth.net.getId();\n        const deployedNetwork2 = Transaction.networks[networkId2];\n        const contractT = new web3.eth.Contract(Transaction.abi, deployedNetwork2 && deployedNetwork2.address); // Set web3, accounts, and contract to the state, and then proceed with an\n        // example of interacting with the contract's methods.\n\n        this.setState({\n          web3,\n          account: accounts[0],\n          contract1: contractA,\n          contract: contractT\n        }, this.start);\n      } catch (error) {\n        // Catch any errors for any of the above operations.\n        alert(\"Failed to load web3, accounts, or contract. Check console for details.\");\n        console.error(error);\n      }\n    };\n\n    this.start = async () => {\n      const _this$state = this.state,\n            web3 = _this$state.web3,\n            account = _this$state.account,\n            contract1 = _this$state.contract1,\n            contract2 = _this$state.contract2;\n      console.log(\"web3 =\", web3);\n      console.log(\"Contract =\", contract1);\n      console.log(\"Contract =\", contract2);\n      console.log(\"Acoount =\", account);\n    };\n  }\n\n  render() {\n    if (!this.state.web3) {\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 67\n        },\n        __self: this\n      }, \"Users are requested to get connected to METAMASK before using this dAPP\");\n    }\n\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 70\n      },\n      __self: this\n    }, React.createElement(Dashboard, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 71\n      },\n      __self: this\n    }));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["D:/reactDAPP/client/src/App.js"],"names":["React","Component","Authentication","Transaction","getWeb3","Dashboard","App","state","web3","account","contract1","contract2","componentDidMount","accounts","eth","getAccounts","networkId1","net","getId","deployedNetwork1","networks","contractA","Contract","abi","address","networkId2","deployedNetwork2","contractT","setState","contract","start","error","alert","console","log","render"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport Authentication from \"./contracts/Authentication.json\";\nimport Transaction from \"./contracts/Transaction.json\";\nimport getWeb3 from \"./getWeb3\";\nimport Dashboard from \"./components/Dashboard\";\nimport 'semantic-ui-css/semantic.min.css';\n\n\nclass App extends Component {\n  state = { web3: null, account: null, contract1: null,contract2: null };\n\n  componentDidMount = async () => {\n    try {\n      // Get network provider and web3 instance.\n      const web3 = await getWeb3();\n\n      // Use web3 to get the user's accounts.\n      const accounts = await web3.eth.getAccounts();\n\n      // Get the Authentication contract instance.\n      const networkId1 = await web3.eth.net.getId();\n      const deployedNetwork1 = Authentication.networks[networkId1];\n      const contractA = new web3.eth.Contract(\n        Authentication.abi,\n        deployedNetwork1 && deployedNetwork1.address,\n      );\n\n\n      \n      // Get the Transaction contract instance.\n      const networkId2 = await web3.eth.net.getId();\n      const deployedNetwork2 = Transaction.networks[networkId2];\n      const contractT = new web3.eth.Contract(\n        Transaction.abi,\n        deployedNetwork2 && deployedNetwork2.address,\n      );\n\n\n\n      // Set web3, accounts, and contract to the state, and then proceed with an\n      // example of interacting with the contract's methods.\n      this.setState({ web3, account:accounts[0], contract1: contractA , contract: contractT},this.start);\n    } catch (error) {\n      // Catch any errors for any of the above operations.\n      alert(\n        `Failed to load web3, accounts, or contract. Check console for details.`,\n      );\n      console.error(error);\n    }\n\n  };\n  start = async () => {\n   \n    const { web3,account,contract1,contract2 } = this.state;\n    \n    console.log(\"web3 =\", web3);\n    console.log(\"Contract =\", contract1);\n    console.log(\"Contract =\", contract2);\n    console.log(\"Acoount =\", account);\n  };\n\n\n \n\n  render() {\n    if (!this.state.web3) {\n      return <div>Users are requested to get connected to METAMASK before using this dAPP</div>;\n    }\n    return (\n      <div>\n      <Dashboard />\n      </div>\n    );\n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}