{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\n\nvar errCode = require('err-code');\n\nvar browserStreamToIt = require('browser-readablestream-to-it');\n\nvar itPeekable = require('it-peekable');\n\nvar utils = require('./utils.js');\n\nvar ipfsUnixfs = require('ipfs-unixfs');\n\nfunction _interopDefaultLegacy(e) {\n  return e && typeof e === 'object' && 'default' in e ? e : {\n    'default': e\n  };\n}\n\nvar errCode__default =\n/*#__PURE__*/\n_interopDefaultLegacy(errCode);\n\nvar browserStreamToIt__default =\n/*#__PURE__*/\n_interopDefaultLegacy(browserStreamToIt);\n\nvar itPeekable__default =\n/*#__PURE__*/\n_interopDefaultLegacy(itPeekable);\n\nasync function* normaliseCandidateSingle(input, normaliseContent) {\n  if (input === null || input === undefined) {\n    throw errCode__default[\"default\"](new Error(\"Unexpected input: \".concat(input)), 'ERR_UNEXPECTED_INPUT');\n  }\n\n  if (typeof input === 'string' || input instanceof String) {\n    yield toFileObject(input.toString(), normaliseContent);\n    return;\n  }\n\n  if (utils.isBytes(input) || utils.isBlob(input)) {\n    yield toFileObject(input, normaliseContent);\n    return;\n  }\n\n  if (utils.isReadableStream(input)) {\n    input = browserStreamToIt__default[\"default\"](input);\n  }\n\n  if (Symbol.iterator in input || Symbol.asyncIterator in input) {\n    const peekable = itPeekable__default[\"default\"](input);\n\n    const _ref = await peekable.peek(),\n          value = _ref.value,\n          done = _ref.done;\n\n    if (done) {\n      yield {\n        content: []\n      };\n      return;\n    }\n\n    peekable.push(value);\n\n    if (Number.isInteger(value) || utils.isBytes(value) || typeof value === 'string' || value instanceof String) {\n      yield toFileObject(peekable, normaliseContent);\n      return;\n    }\n\n    throw errCode__default[\"default\"](new Error('Unexpected input: multiple items passed - if you are using ipfs.add, please use ipfs.addAll instead'), 'ERR_UNEXPECTED_INPUT');\n  }\n\n  if (utils.isFileObject(input)) {\n    yield toFileObject(input, normaliseContent);\n    return;\n  }\n\n  throw errCode__default[\"default\"](new Error('Unexpected input: cannot convert \"' + typeof input + '\" into ImportCandidate'), 'ERR_UNEXPECTED_INPUT');\n}\n\nasync function toFileObject(input, normaliseContent) {\n  const path = input.path,\n        mode = input.mode,\n        mtime = input.mtime,\n        content = input.content;\n  const file = {\n    path: path || '',\n    mode: ipfsUnixfs.parseMode(mode),\n    mtime: ipfsUnixfs.parseMtime(mtime)\n  };\n\n  if (content) {\n    file.content = await normaliseContent(content);\n  } else if (!path) {\n    file.content = await normaliseContent(input);\n  }\n\n  return file;\n}\n\nexports.normaliseCandidateSingle = normaliseCandidateSingle;","map":null,"metadata":{},"sourceType":"script"}