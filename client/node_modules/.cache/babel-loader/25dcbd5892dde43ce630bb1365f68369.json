{"ast":null,"code":"\"use strict\";\n\nvar _slicedToArray = require(\"D:\\\\reactDAPP\\\\client\\\\node_modules\\\\@babel\\\\runtime/helpers/slicedToArray\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst utils_1 = require(\"./utils\");\n\nconst cid_1 = require(\"multiformats/cid\");\n\nfunction fromSplit(split) {\n  const _split = _slicedToArray(split, 3),\n        protectedHeader = _split[0],\n        payload = _split[1],\n        signature = _split[2];\n\n  return {\n    payload,\n    signatures: [{\n      protected: protectedHeader,\n      signature\n    }],\n    link: cid_1.CID.decode(utils_1.fromBase64url(payload))\n  };\n}\n\nfunction encodeSignature(signature) {\n  const encoded = {\n    signature: utils_1.fromBase64url(signature.signature)\n  };\n  if (signature.header) encoded.header = signature.header;\n  if (signature.protected) encoded.protected = utils_1.fromBase64url(signature.protected);\n  return encoded;\n}\n\nfunction encode(jws) {\n  const payload = utils_1.fromBase64url(jws.payload);\n\n  try {\n    cid_1.CID.decode(payload);\n  } catch (e) {\n    throw new Error('Not a valid DagJWS');\n  }\n\n  const encodedJws = {\n    payload,\n    signatures: jws.signatures.map(encodeSignature)\n  };\n  return encodedJws;\n}\n\nfunction decodeSignature(encoded) {\n  const sign = {\n    signature: utils_1.toBase64url(encoded.signature)\n  };\n  if (encoded.header) sign.header = encoded.header;\n  if (encoded.protected) sign.protected = utils_1.toBase64url(encoded.protected);\n  return sign;\n}\n\nfunction decode(encoded) {\n  const decoded = {\n    payload: utils_1.toBase64url(encoded.payload),\n    signatures: encoded.signatures.map(decodeSignature)\n  };\n  decoded.link = cid_1.CID.decode(new Uint8Array(encoded.payload));\n  return decoded;\n}\n\nexports.default = {\n  fromSplit,\n  encode,\n  decode\n};","map":null,"metadata":{},"sourceType":"script"}