{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\n\nconst LOAD_CODEC = codeOrName => Promise.reject(new Error(\"No codec found for \\\"\".concat(codeOrName, \"\\\"\")));\n\nclass Multicodecs {\n  constructor(options) {\n    this._codecsByName = {};\n    this._codecsByCode = {};\n    this._loadCodec = options.loadCodec || LOAD_CODEC;\n\n    for (const codec of options.codecs) {\n      this.addCodec(codec);\n    }\n  }\n\n  addCodec(codec) {\n    if (this._codecsByName[codec.name] || this._codecsByCode[codec.code]) {\n      throw new Error(\"Resolver already exists for codec \\\"\".concat(codec.name, \"\\\"\"));\n    }\n\n    this._codecsByName[codec.name] = codec;\n    this._codecsByCode[codec.code] = codec;\n  }\n\n  removeCodec(codec) {\n    delete this._codecsByName[codec.name];\n    delete this._codecsByCode[codec.code];\n  }\n\n  async getCodec(code) {\n    const table = typeof code === 'string' ? this._codecsByName : this._codecsByCode;\n\n    if (table[code]) {\n      return table[code];\n    }\n\n    const codec = await this._loadCodec(code);\n\n    if (table[code] == null) {\n      this.addCodec(codec);\n    }\n\n    return codec;\n  }\n\n  listCodecs() {\n    return Object.values(this._codecsByName);\n  }\n\n}\n\nexports.Multicodecs = Multicodecs;","map":null,"metadata":{},"sourceType":"script"}