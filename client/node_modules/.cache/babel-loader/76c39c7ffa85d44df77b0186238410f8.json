{"ast":null,"code":"import _objectWithoutProperties from \"D:\\\\test\\\\client\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectWithoutProperties\";\nimport _slicedToArray from \"D:\\\\test\\\\client\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nimport classNames from 'classnames';\nimport * as React from 'react';\nimport NoopTransition from '@restart/ui/NoopTransition';\nimport SelectableContext from '@restart/ui/SelectableContext';\nimport TabContext from '@restart/ui/TabContext';\nimport { useTabPanel } from '@restart/ui/TabPanel';\nimport { useBootstrapPrefix } from './ThemeProvider';\nimport getTabTransitionComponent from './getTabTransitionComponent';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst TabPane =\n/*#__PURE__*/\nReact.forwardRef(({\n  bsPrefix,\n  transition,\n  ...props\n}, ref) => {\n  const _useTabPanel = useTabPanel({ ...props,\n    transition: getTabTransitionComponent(transition)\n  }),\n        _useTabPanel2 = _slicedToArray(_useTabPanel, 2),\n        _useTabPanel2$ = _useTabPanel2[0],\n        className = _useTabPanel2$.className,\n        _useTabPanel2$$as = _useTabPanel2$.as,\n        Component = _useTabPanel2$$as === void 0 ? 'div' : _useTabPanel2$$as,\n        rest = _objectWithoutProperties(_useTabPanel2$, [\"className\", \"as\"]),\n        _useTabPanel2$2 = _useTabPanel2[1],\n        isActive = _useTabPanel2$2.isActive,\n        onEnter = _useTabPanel2$2.onEnter,\n        onEntering = _useTabPanel2$2.onEntering,\n        onEntered = _useTabPanel2$2.onEntered,\n        onExit = _useTabPanel2$2.onExit,\n        onExiting = _useTabPanel2$2.onExiting,\n        onExited = _useTabPanel2$2.onExited,\n        mountOnEnter = _useTabPanel2$2.mountOnEnter,\n        unmountOnExit = _useTabPanel2$2.unmountOnExit,\n        _useTabPanel2$2$trans = _useTabPanel2$2.transition,\n        Transition = _useTabPanel2$2$trans === void 0 ? NoopTransition : _useTabPanel2$2$trans;\n\n  const prefix = useBootstrapPrefix(bsPrefix, 'tab-pane'); // We provide an empty the TabContext so `<Nav>`s in `<TabPanel>`s don't\n  // conflict with the top level one.\n\n  return (\n    /*#__PURE__*/\n    _jsx(TabContext.Provider, {\n      value: null,\n      children:\n      /*#__PURE__*/\n      _jsx(SelectableContext.Provider, {\n        value: null,\n        children:\n        /*#__PURE__*/\n        _jsx(Transition, {\n          in: isActive,\n          onEnter: onEnter,\n          onEntering: onEntering,\n          onEntered: onEntered,\n          onExit: onExit,\n          onExiting: onExiting,\n          onExited: onExited,\n          mountOnEnter: mountOnEnter,\n          unmountOnExit: unmountOnExit,\n          children:\n          /*#__PURE__*/\n          _jsx(Component, { ...rest,\n            ref: ref,\n            className: classNames(className, prefix, isActive && 'active')\n          })\n        })\n      })\n    })\n  );\n});\nTabPane.displayName = 'TabPane';\nexport default TabPane;","map":null,"metadata":{},"sourceType":"module"}