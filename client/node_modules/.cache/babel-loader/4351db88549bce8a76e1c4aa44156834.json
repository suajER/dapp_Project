{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\n\nvar normaliseInputMultiple_browser = require('./files/normalise-input-multiple.browser.js');\n\nvar modeToString = require('./mode-to-string.js');\n\nasync function multipartRequest(source, abortController, headers = {}) {\n  const parts = [];\n  const formData = new FormData();\n  let index = 0;\n  let total = 0;\n\n  for await (const _ref of normaliseInputMultiple_browser.normaliseInput(source)) {\n    const content = _ref.content;\n    const path = _ref.path;\n    const mode = _ref.mode;\n    const mtime = _ref.mtime;\n    let fileSuffix = '';\n    const type = content ? 'file' : 'dir';\n\n    if (index > 0) {\n      fileSuffix = \"-\".concat(index);\n    }\n\n    let fieldName = type + fileSuffix;\n    const qs = [];\n\n    if (mode !== null && mode !== undefined) {\n      qs.push(\"mode=\".concat(modeToString.modeToString(mode)));\n    }\n\n    if (mtime != null) {\n      const secs = mtime.secs,\n            nsecs = mtime.nsecs;\n      qs.push(\"mtime=\".concat(secs));\n\n      if (nsecs != null) {\n        qs.push(\"mtime-nsecs=\".concat(nsecs));\n      }\n    }\n\n    if (qs.length) {\n      fieldName = \"\".concat(fieldName, \"?\").concat(qs.join('&'));\n    }\n\n    if (content) {\n      formData.set(fieldName, content, path != null ? encodeURIComponent(path) : undefined);\n      const end = total + content.size;\n      parts.push({\n        name: path,\n        start: total,\n        end\n      });\n      total = end;\n    } else if (path != null) {\n      formData.set(fieldName, new File([''], encodeURIComponent(path), {\n        type: 'application/x-directory'\n      }));\n    } else {\n      throw new Error('path or content or both must be set');\n    }\n\n    index++;\n  }\n\n  return {\n    total,\n    parts,\n    headers,\n    body: formData\n  };\n}\n\nexports.multipartRequest = multipartRequest;","map":null,"metadata":{},"sourceType":"script"}