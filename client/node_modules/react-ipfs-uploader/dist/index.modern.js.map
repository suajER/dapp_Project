{"version":3,"file":"index.modern.js","sources":["../node_modules/babel-plugin-transform-async-to-promises/helpers.js","../src/components/FileUpload.js","../src/components/MultipleFilesUpload.js","../src/components/FolderUpload.js","../src/components/ImageUpload.js","../src/components/PdfUpload.js","../src/components/TextUpload.js"],"sourcesContent":["// A type of promise-like that resolves synchronously and supports only one observer\nexport const _Pact = /*#__PURE__*/(function() {\n\tfunction _Pact() {}\n\t_Pact.prototype.then = function(onFulfilled, onRejected) {\n\t\tconst result = new _Pact();\n\t\tconst state = this.s;\n\t\tif (state) {\n\t\t\tconst callback = state & 1 ? onFulfilled : onRejected;\n\t\t\tif (callback) {\n\t\t\t\ttry {\n\t\t\t\t\t_settle(result, 1, callback(this.v));\n\t\t\t\t} catch (e) {\n\t\t\t\t\t_settle(result, 2, e);\n\t\t\t\t}\n\t\t\t\treturn result;\n\t\t\t} else {\n\t\t\t\treturn this;\n\t\t\t}\n\t\t}\n\t\tthis.o = function(_this) {\n\t\t\ttry {\n\t\t\t\tconst value = _this.v;\n\t\t\t\tif (_this.s & 1) {\n\t\t\t\t\t_settle(result, 1, onFulfilled ? onFulfilled(value) : value);\n\t\t\t\t} else if (onRejected) {\n\t\t\t\t\t_settle(result, 1, onRejected(value));\n\t\t\t\t} else {\n\t\t\t\t\t_settle(result, 2, value);\n\t\t\t\t}\n\t\t\t} catch (e) {\n\t\t\t\t_settle(result, 2, e);\n\t\t\t}\n\t\t};\n\t\treturn result;\n\t}\n\treturn _Pact;\n})();\n\n// Settles a pact synchronously\nexport function _settle(pact, state, value) {\n\tif (!pact.s) {\n\t\tif (value instanceof _Pact) {\n\t\t\tif (value.s) {\n\t\t\t\tif (state & 1) {\n\t\t\t\t\tstate = value.s;\n\t\t\t\t}\n\t\t\t\tvalue = value.v;\n\t\t\t} else {\n\t\t\t\tvalue.o = _settle.bind(null, pact, state);\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\t\tif (value && value.then) {\n\t\t\tvalue.then(_settle.bind(null, pact, state), _settle.bind(null, pact, 2));\n\t\t\treturn;\n\t\t}\n\t\tpact.s = state;\n\t\tpact.v = value;\n\t\tconst observer = pact.o;\n\t\tif (observer) {\n\t\t\tobserver(pact);\n\t\t}\n\t}\n}\n\nexport function _isSettledPact(thenable) {\n\treturn thenable instanceof _Pact && thenable.s & 1;\n}\n\n// Converts argument to a function that always returns a Promise\nexport function _async(f) {\n\treturn function() {\n\t\tfor (var args = [], i = 0; i < arguments.length; i++) {\n\t\t\targs[i] = arguments[i];\n\t\t}\n\t\ttry {\n\t\t\treturn Promise.resolve(f.apply(this, args));\n\t\t} catch(e) {\n\t\t\treturn Promise.reject(e);\n\t\t}\n\t}\n}\n\n// Awaits on a value that may or may not be a Promise (equivalent to the await keyword in ES2015, with continuations passed explicitly)\nexport function _await(value, then, direct) {\n\tif (direct) {\n\t\treturn then ? then(value) : value;\n\t}\n\tif (!value || !value.then) {\n\t\tvalue = Promise.resolve(value);\n\t}\n\treturn then ? value.then(then) : value;\n}\n\n// Awaits on a value that may or may not be a Promise, then ignores it\nexport function _awaitIgnored(value, direct) {\n\tif (!direct) {\n\t\treturn value && value.then ? value.then(_empty) : Promise.resolve();\n\t}\n}\n\n// Proceeds after a value has resolved, or proceeds immediately if the value is not thenable\nexport function _continue(value, then) {\n\treturn value && value.then ? value.then(then) : then(value);\n}\n\n// Proceeds after a value has resolved, or proceeds immediately if the value is not thenable\nexport function _continueIgnored(value) {\n\tif (value && value.then) {\n\t\treturn value.then(_empty);\n\t}\n}\n\n// Asynchronously iterate through an object that has a length property, passing the index as the first argument to the callback (even as the length property changes)\nexport function _forTo(array, body, check) {\n\tvar i = -1, pact, reject;\n\tfunction _cycle(result) {\n\t\ttry {\n\t\t\twhile (++i < array.length && (!check || !check())) {\n\t\t\t\tresult = body(i);\n\t\t\t\tif (result && result.then) {\n\t\t\t\t\tif (_isSettledPact(result)) {\n\t\t\t\t\t\tresult = result.v;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tresult.then(_cycle, reject || (reject = _settle.bind(null, pact = new _Pact(), 2)));\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (pact) {\n\t\t\t\t_settle(pact, 1, result);\n\t\t\t} else {\n\t\t\t\tpact = result;\n\t\t\t}\n\t\t} catch (e) {\n\t\t\t_settle(pact || (pact = new _Pact()), 2, e);\n\t\t}\n\t}\n\t_cycle();\n\treturn pact;\n}\n\n// Asynchronously iterate through an object's properties (including properties inherited from the prototype)\n// Uses a snapshot of the object's properties\nexport function _forIn(target, body, check) {\n\tvar keys = [];\n\tfor (var key in target) {\n\t\tkeys.push(key);\n\t}\n\treturn _forTo(keys, function(i) { return body(keys[i]); }, check);\n}\n\n// Asynchronously iterate through an object's own properties (excluding properties inherited from the prototype)\n// Uses a snapshot of the object's properties\nexport function _forOwn(target, body, check) {\n\tvar keys = [];\n\tfor (var key in target) {\n\t\tif (Object.prototype.hasOwnProperty.call(target, key)) {\n\t\t\tkeys.push(key);\n\t\t}\n\t}\n\treturn _forTo(keys, function(i) { return body(keys[i]); }, check);\n}\n\nexport const _iteratorSymbol = /*#__PURE__*/ typeof Symbol !== \"undefined\" ? (Symbol.iterator || (Symbol.iterator = Symbol(\"Symbol.iterator\"))) : \"@@iterator\";\n\n// Asynchronously iterate through an object's values\n// Uses for...of if the runtime supports it, otherwise iterates until length on a copy\nexport function _forOf(target, body, check) {\n\tif (typeof target[_iteratorSymbol] === \"function\") {\n\t\tvar iterator = target[_iteratorSymbol](), step, pact, reject;\n\t\tfunction _cycle(result) {\n\t\t\ttry {\n\t\t\t\twhile (!(step = iterator.next()).done && (!check || !check())) {\n\t\t\t\t\tresult = body(step.value);\n\t\t\t\t\tif (result && result.then) {\n\t\t\t\t\t\tif (_isSettledPact(result)) {\n\t\t\t\t\t\t\tresult = result.v;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tresult.then(_cycle, reject || (reject = _settle.bind(null, pact = new _Pact(), 2)));\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (pact) {\n\t\t\t\t\t_settle(pact, 1, result);\n\t\t\t\t} else {\n\t\t\t\t\tpact = result;\n\t\t\t\t}\n\t\t\t} catch (e) {\n\t\t\t\t_settle(pact || (pact = new _Pact()), 2, e);\n\t\t\t}\n\t\t}\n\t\t_cycle();\n\t\tif (iterator.return) {\n\t\t\tvar _fixup = function(value) {\n\t\t\t\ttry {\n\t\t\t\t\tif (!step.done) {\n\t\t\t\t\t\titerator.return();\n\t\t\t\t\t}\n\t\t\t\t} catch(e) {\n\t\t\t\t}\n\t\t\t\treturn value;\n\t\t\t}\n\t\t\tif (pact && pact.then) {\n\t\t\t\treturn pact.then(_fixup, function(e) {\n\t\t\t\t\tthrow _fixup(e);\n\t\t\t\t});\n\t\t\t}\n\t\t\t_fixup();\n\t\t}\n\t\treturn pact;\n\t}\n\t// No support for Symbol.iterator\n\tif (!(\"length\" in target)) {\n\t\tthrow new TypeError(\"Object is not iterable\");\n\t}\n\t// Handle live collections properly\n\tvar values = [];\n\tfor (var i = 0; i < target.length; i++) {\n\t\tvalues.push(target[i]);\n\t}\n\treturn _forTo(values, function(i) { return body(values[i]); }, check);\n}\n\nexport const _asyncIteratorSymbol = /*#__PURE__*/ typeof Symbol !== \"undefined\" ? (Symbol.asyncIterator || (Symbol.asyncIterator = Symbol(\"Symbol.asyncIterator\"))) : \"@@asyncIterator\";\n\n// Asynchronously iterate on a value using it's async iterator if present, or its synchronous iterator if missing\nexport function _forAwaitOf(target, body, check) {\n\tif (typeof target[_asyncIteratorSymbol] === \"function\") {\n\t\tvar pact = new _Pact();\n\t\tvar iterator = target[_asyncIteratorSymbol]();\n\t\titerator.next().then(_resumeAfterNext).then(void 0, _reject);\n\t\treturn pact;\n\t\tfunction _resumeAfterBody(result) {\n\t\t\tif (check && check()) {\n\t\t\t\treturn _settle(pact, 1, iterator.return ? iterator.return().then(function() { return result; }) : result);\n\t\t\t}\n\t\t\titerator.next().then(_resumeAfterNext).then(void 0, _reject);\n\t\t}\n\t\tfunction _resumeAfterNext(step) {\n\t\t\tif (step.done) {\n\t\t\t\t_settle(pact, 1);\n\t\t\t} else {\n\t\t\t\tPromise.resolve(body(step.value)).then(_resumeAfterBody).then(void 0, _reject);\n\t\t\t}\n\t\t}\n\t\tfunction _reject(error) {\n\t\t\t_settle(pact, 2, iterator.return ? iterator.return().then(function() { return error; }) : error);\n\t\t}\n\t}\n\treturn Promise.resolve(_forOf(target, function(value) { return Promise.resolve(value).then(body); }, check));\n}\n\n// Asynchronously implement a generic for loop\nexport function _for(test, update, body) {\n\tvar stage;\n\tfor (;;) {\n\t\tvar shouldContinue = test();\n\t\tif (_isSettledPact(shouldContinue)) {\n\t\t\tshouldContinue = shouldContinue.v;\n\t\t}\n\t\tif (!shouldContinue) {\n\t\t\treturn result;\n\t\t}\n\t\tif (shouldContinue.then) {\n\t\t\tstage = 0;\n\t\t\tbreak;\n\t\t}\n\t\tvar result = body();\n\t\tif (result && result.then) {\n\t\t\tif (_isSettledPact(result)) {\n\t\t\t\tresult = result.s;\n\t\t\t} else {\n\t\t\t\tstage = 1;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif (update) {\n\t\t\tvar updateValue = update();\n\t\t\tif (updateValue && updateValue.then && !_isSettledPact(updateValue)) {\n\t\t\t\tstage = 2;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\tvar pact = new _Pact();\n\tvar reject = _settle.bind(null, pact, 2);\n\t(stage === 0 ? shouldContinue.then(_resumeAfterTest) : stage === 1 ? result.then(_resumeAfterBody) : updateValue.then(_resumeAfterUpdate)).then(void 0, reject);\n\treturn pact;\n\tfunction _resumeAfterBody(value) {\n\t\tresult = value;\n\t\tdo {\n\t\t\tif (update) {\n\t\t\t\tupdateValue = update();\n\t\t\t\tif (updateValue && updateValue.then && !_isSettledPact(updateValue)) {\n\t\t\t\t\tupdateValue.then(_resumeAfterUpdate).then(void 0, reject);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\t\t\tshouldContinue = test();\n\t\t\tif (!shouldContinue || (_isSettledPact(shouldContinue) && !shouldContinue.v)) {\n\t\t\t\t_settle(pact, 1, result);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tif (shouldContinue.then) {\n\t\t\t\tshouldContinue.then(_resumeAfterTest).then(void 0, reject);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tresult = body();\n\t\t\tif (_isSettledPact(result)) {\n\t\t\t\tresult = result.v;\n\t\t\t}\n\t\t} while (!result || !result.then);\n\t\tresult.then(_resumeAfterBody).then(void 0, reject);\n\t}\n\tfunction _resumeAfterTest(shouldContinue) {\n\t\tif (shouldContinue) {\n\t\t\tresult = body();\n\t\t\tif (result && result.then) {\n\t\t\t\tresult.then(_resumeAfterBody).then(void 0, reject);\n\t\t\t} else {\n\t\t\t\t_resumeAfterBody(result);\n\t\t\t}\n\t\t} else {\n\t\t\t_settle(pact, 1, result);\n\t\t}\n\t}\n\tfunction _resumeAfterUpdate() {\n\t\tif (shouldContinue = test()) {\n\t\t\tif (shouldContinue.then) {\n\t\t\t\tshouldContinue.then(_resumeAfterTest).then(void 0, reject);\n\t\t\t} else {\n\t\t\t\t_resumeAfterTest(shouldContinue);\n\t\t\t}\n\t\t} else {\n\t\t\t_settle(pact, 1, result);\n\t\t}\n\t}\n}\n\n// Asynchronously implement a do ... while loop\nexport function _do(body, test) {\n\tvar awaitBody;\n\tdo {\n\t\tvar result = body();\n\t\tif (result && result.then) {\n\t\t\tif (_isSettledPact(result)) {\n\t\t\t\tresult = result.v;\n\t\t\t} else {\n\t\t\t\tawaitBody = true;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tvar shouldContinue = test();\n\t\tif (_isSettledPact(shouldContinue)) {\n\t\t\tshouldContinue = shouldContinue.v;\n\t\t}\n\t\tif (!shouldContinue) {\n\t\t\treturn result;\n\t\t}\n\t} while (!shouldContinue.then);\n\tconst pact = new _Pact();\n\tconst reject = _settle.bind(null, pact, 2);\n\t(awaitBody ? result.then(_resumeAfterBody) : shouldContinue.then(_resumeAfterTest)).then(void 0, reject);\n\treturn pact;\n\tfunction _resumeAfterBody(value) {\n\t\tresult = value;\n\t\tfor (;;) {\n\t\t\tshouldContinue = test();\n\t\t\tif (_isSettledPact(shouldContinue)) {\n\t\t\t\tshouldContinue = shouldContinue.v;\n\t\t\t}\n\t\t\tif (!shouldContinue) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tif (shouldContinue.then) {\n\t\t\t\tshouldContinue.then(_resumeAfterTest).then(void 0, reject);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tresult = body();\n\t\t\tif (result && result.then) {\n\t\t\t\tif (_isSettledPact(result)) {\n\t\t\t\t\tresult = result.v;\n\t\t\t\t} else {\n\t\t\t\t\tresult.then(_resumeAfterBody).then(void 0, reject);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t_settle(pact, 1, result);\n\t}\n\tfunction _resumeAfterTest(shouldContinue) {\n\t\tif (shouldContinue) {\n\t\t\tdo {\n\t\t\t\tresult = body();\n\t\t\t\tif (result && result.then) {\n\t\t\t\t\tif (_isSettledPact(result)) {\n\t\t\t\t\t\tresult = result.v;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tresult.then(_resumeAfterBody).then(void 0, reject);\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tshouldContinue = test();\n\t\t\t\tif (_isSettledPact(shouldContinue)) {\n\t\t\t\t\tshouldContinue = shouldContinue.v;\n\t\t\t\t}\n\t\t\t\tif (!shouldContinue) {\n\t\t\t\t\t_settle(pact, 1, result);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t} while (!shouldContinue.then);\n\t\t\tshouldContinue.then(_resumeAfterTest).then(void 0, reject);\n\t\t} else {\n\t\t\t_settle(pact, 1, result);\n\t\t}\n\t}\n}\n\n// Asynchronously implement a switch statement\nexport function _switch(discriminant, cases) {\n\tvar dispatchIndex = -1;\n\tvar awaitBody;\n\touter: {\n\t\tfor (var i = 0; i < cases.length; i++) {\n\t\t\tvar test = cases[i][0];\n\t\t\tif (test) {\n\t\t\t\tvar testValue = test();\n\t\t\t\tif (testValue && testValue.then) {\n\t\t\t\t\tbreak outer;\n\t\t\t\t}\n\t\t\t\tif (testValue === discriminant) {\n\t\t\t\t\tdispatchIndex = i;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t// Found the default case, set it as the pending dispatch case\n\t\t\t\tdispatchIndex = i;\n\t\t\t}\n\t\t}\n\t\tif (dispatchIndex !== -1) {\n\t\t\tdo {\n\t\t\t\tvar body = cases[dispatchIndex][1];\n\t\t\t\twhile (!body) {\n\t\t\t\t\tdispatchIndex++;\n\t\t\t\t\tbody = cases[dispatchIndex][1];\n\t\t\t\t}\n\t\t\t\tvar result = body();\n\t\t\t\tif (result && result.then) {\n\t\t\t\t\tawaitBody = true;\n\t\t\t\t\tbreak outer;\n\t\t\t\t}\n\t\t\t\tvar fallthroughCheck = cases[dispatchIndex][2];\n\t\t\t\tdispatchIndex++;\n\t\t\t} while (fallthroughCheck && !fallthroughCheck());\n\t\t\treturn result;\n\t\t}\n\t}\n\tconst pact = new _Pact();\n\tconst reject = _settle.bind(null, pact, 2);\n\t(awaitBody ? result.then(_resumeAfterBody) : testValue.then(_resumeAfterTest)).then(void 0, reject);\n\treturn pact;\n\tfunction _resumeAfterTest(value) {\n\t\tfor (;;) {\n\t\t\tif (value === discriminant) {\n\t\t\t\tdispatchIndex = i;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tif (++i === cases.length) {\n\t\t\t\tif (dispatchIndex !== -1) {\n\t\t\t\t\tbreak;\n\t\t\t\t} else {\n\t\t\t\t\t_settle(pact, 1, result);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\t\t\ttest = cases[i][0];\n\t\t\tif (test) {\n\t\t\t\tvalue = test();\n\t\t\t\tif (value && value.then) {\n\t\t\t\t\tvalue.then(_resumeAfterTest).then(void 0, reject);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tdispatchIndex = i;\n\t\t\t}\n\t\t}\n\t\tdo {\n\t\t\tvar body = cases[dispatchIndex][1];\n\t\t\twhile (!body) {\n\t\t\t\tdispatchIndex++;\n\t\t\t\tbody = cases[dispatchIndex][1];\n\t\t\t}\n\t\t\tvar result = body();\n\t\t\tif (result && result.then) {\n\t\t\t\tresult.then(_resumeAfterBody).then(void 0, reject);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tvar fallthroughCheck = cases[dispatchIndex][2];\n\t\t\tdispatchIndex++;\n\t\t} while (fallthroughCheck && !fallthroughCheck());\n\t\t_settle(pact, 1, result);\n\t}\n\tfunction _resumeAfterBody(result) {\n\t\tfor (;;) {\n\t\t\tvar fallthroughCheck = cases[dispatchIndex][2];\n\t\t\tif (!fallthroughCheck || fallthroughCheck()) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tdispatchIndex++;\n\t\t\tvar body = cases[dispatchIndex][1];\n\t\t\twhile (!body) {\n\t\t\t\tdispatchIndex++;\n\t\t\t\tbody = cases[dispatchIndex][1];\n\t\t\t}\n\t\t\tresult = body();\n\t\t\tif (result && result.then) {\n\t\t\t\tresult.then(_resumeAfterBody).then(void 0, reject);\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\t\t_settle(pact, 1, result);\n\t}\n}\n\n// Asynchronously call a function and pass the result to explicitly passed continuations\nexport function _call(body, then, direct) {\n\tif (direct) {\n\t\treturn then ? then(body()) : body();\n\t}\n\ttry {\n\t\tvar result = Promise.resolve(body());\n\t\treturn then ? result.then(then) : result;\n\t} catch (e) {\n\t\treturn Promise.reject(e);\n\t}\n}\n\n// Asynchronously call a function and swallow the result\nexport function _callIgnored(body, direct) {\n\treturn _call(body, _empty, direct);\n}\n\n// Asynchronously call a function and pass the result to explicitly passed continuations\nexport function _invoke(body, then) {\n\tvar result = body();\n\tif (result && result.then) {\n\t\treturn result.then(then);\n\t}\n\treturn then(result);\n}\n\n// Asynchronously call a function and swallow the result\nexport function _invokeIgnored(body) {\n\tvar result = body();\n\tif (result && result.then) {\n\t\treturn result.then(_empty);\n\t}\n}\n\n// Asynchronously call a function and send errors to recovery continuation\nexport function _catch(body, recover) {\n\ttry {\n\t\tvar result = body();\n\t} catch(e) {\n\t\treturn recover(e);\n\t}\n\tif (result && result.then) {\n\t\treturn result.then(void 0, recover);\n\t}\n\treturn result;\n}\n\n// Asynchronously await a promise and pass the result to a finally continuation\nexport function _finallyRethrows(body, finalizer) {\n\ttry {\n\t\tvar result = body();\n\t} catch (e) {\n\t\treturn finalizer(true, e);\n\t}\n\tif (result && result.then) {\n\t\treturn result.then(finalizer.bind(null, false), finalizer.bind(null, true));\n\t}\n\treturn finalizer(false, result);\n}\n\n// Asynchronously await a promise and invoke a finally continuation that always overrides the result\nexport function _finally(body, finalizer) {\n\ttry {\n\t\tvar result = body();\n\t} catch (e) {\n\t\treturn finalizer();\n\t}\n\tif (result && result.then) {\n\t\treturn result.then(finalizer, finalizer);\n\t}\n\treturn finalizer();\n}\n\n// Rethrow or return a value from a finally continuation\nexport function _rethrow(thrown, value) {\n\tif (thrown)\n\t\tthrow value;\n\treturn value;\n}\n\n// Empty function to implement break and other control flow that ignores asynchronous results\nexport function _empty() {\n}\n\n// Sentinel value for early returns in generators \nexport const _earlyReturn = /*#__PURE__*/ {};\n\n// Asynchronously call a function and send errors to recovery continuation, skipping early returns\nexport function _catchInGenerator(body, recover) {\n\treturn _catch(body, function(e) {\n\t\tif (e === _earlyReturn) {\n\t\t\tthrow e;\n\t\t}\n\t\treturn recover(e);\n\t});\n}\n\n// Asynchronous generator class; accepts the entrypoint of the generator, to which it passes itself when the generator should start\nexport const _AsyncGenerator = /*#__PURE__*/(function() {\n\tfunction _AsyncGenerator(entry) {\n\t\tthis._entry = entry;\n\t\tthis._pact = null;\n\t\tthis._resolve = null;\n\t\tthis._return = null;\n\t\tthis._promise = null;\n\t}\n\n\tfunction _wrapReturnedValue(value) {\n\t\treturn { value: value, done: true };\n\t}\n\tfunction _wrapYieldedValue(value) {\n\t\treturn { value: value, done: false };\n\t}\n\n\t_AsyncGenerator.prototype._yield = function(value) {\n\t\t// Yield the value to the pending next call\n\t\tthis._resolve(value && value.then ? value.then(_wrapYieldedValue) : _wrapYieldedValue(value));\n\t\t// Return a pact for an upcoming next/return/throw call\n\t\treturn this._pact = new _Pact();\n\t};\n\t_AsyncGenerator.prototype.next = function(value) {\n\t\t// Advance the generator, starting it if it has yet to be started\n\t\tconst _this = this;\n\t\treturn _this._promise = new Promise(function (resolve) {\n\t\t\tconst _pact = _this._pact;\n\t\t\tif (_pact === null) {\n\t\t\t\tconst _entry = _this._entry;\n\t\t\t\tif (_entry === null) {\n\t\t\t\t\t// Generator is started, but not awaiting a yield expression\n\t\t\t\t\t// Abandon the next call!\n\t\t\t\t\treturn resolve(_this._promise);\n\t\t\t\t}\n\t\t\t\t// Start the generator\n\t\t\t\t_this._entry = null;\n\t\t\t\t_this._resolve = resolve;\n\t\t\t\tfunction returnValue(value) {\n\t\t\t\t\t_this._resolve(value && value.then ? value.then(_wrapReturnedValue) : _wrapReturnedValue(value));\n\t\t\t\t\t_this._pact = null;\n\t\t\t\t\t_this._resolve = null;\n\t\t\t\t}\n\t\t\t\tvar result = _entry(_this);\n\t\t\t\tif (result && result.then) {\n\t\t\t\t\tresult.then(returnValue, function(error) {\n\t\t\t\t\t\tif (error === _earlyReturn) {\n\t\t\t\t\t\t\treturnValue(_this._return);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tconst pact = new _Pact();\n\t\t\t\t\t\t\t_this._resolve(pact);\n\t\t\t\t\t\t\t_this._pact = null;\n\t\t\t\t\t\t\t_this._resolve = null;\n\t\t\t\t\t\t\t_resolve(pact, 2, error);\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t} else {\n\t\t\t\t\treturnValue(result);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t// Generator is started and a yield expression is pending, settle it\n\t\t\t\t_this._pact = null;\n\t\t\t\t_this._resolve = resolve;\n\t\t\t\t_settle(_pact, 1, value);\n\t\t\t}\n\t\t});\n\t};\n\t_AsyncGenerator.prototype.return = function(value) {\n\t\t// Early return from the generator if started, otherwise abandons the generator\n\t\tconst _this = this;\n\t\treturn _this._promise = new Promise(function (resolve) {\n\t\t\tconst _pact = _this._pact;\n\t\t\tif (_pact === null) {\n\t\t\t\tif (_this._entry === null) {\n\t\t\t\t\t// Generator is started, but not awaiting a yield expression\n\t\t\t\t\t// Abandon the return call!\n\t\t\t\t\treturn resolve(_this._promise);\n\t\t\t\t}\n\t\t\t\t// Generator is not started, abandon it and return the specified value\n\t\t\t\t_this._entry = null;\n\t\t\t\treturn resolve(value && value.then ? value.then(_wrapReturnedValue) : _wrapReturnedValue(value));\n\t\t\t}\n\t\t\t// Settle the yield expression with a rejected \"early return\" value\n\t\t\t_this._return = value;\n\t\t\t_this._resolve = resolve;\n\t\t\t_this._pact = null;\n\t\t\t_settle(_pact, 2, _earlyReturn);\n\t\t});\n\t};\n\t_AsyncGenerator.prototype.throw = function(error) {\n\t\t// Inject an exception into the pending yield expression\n\t\tconst _this = this;\n\t\treturn _this._promise = new Promise(function (resolve, reject) {\n\t\t\tconst _pact = _this._pact;\n\t\t\tif (_pact === null) {\n\t\t\t\tif (_this._entry === null) {\n\t\t\t\t\t// Generator is started, but not awaiting a yield expression\n\t\t\t\t\t// Abandon the throw call!\n\t\t\t\t\treturn resolve(_this._promise);\n\t\t\t\t}\n\t\t\t\t// Generator is not started, abandon it and return a rejected Promise containing the error\n\t\t\t\t_this._entry = null;\n\t\t\t\treturn reject(error);\n\t\t\t}\n\t\t\t// Settle the yield expression with the value as a rejection\n\t\t\t_this._resolve = resolve;\n\t\t\t_this._pact = null;\n\t\t\t_settle(_pact, 2, error);\n\t\t});\n\t};\n\n\t_AsyncGenerator.prototype[_asyncIteratorSymbol] = function() {\n\t\treturn this;\n\t};\n\t\n\treturn _AsyncGenerator;\n})();\n","import React, { useState } from 'react'\r\nimport { Form, Button, Badge, ProgressBar, Container } from 'react-bootstrap'\r\nimport { create as ipfsHttpClient } from 'ipfs-http-client'\r\nconst ipfs = ipfsHttpClient('https://ipfs.infura.io:5001/api/v0')\r\n\r\nexport const FileUpload = ({ setUrl }) => {\r\n    const [file, setFile] = useState({})\r\n    const [fileUrl, setFileUrl] = useState('')\r\n    const [loading, setLoading] = useState(false)\r\n    const [uploaded, setUploaded] = useState(false)\r\n\r\n    const uploadFile = async (e) => {\r\n        setLoading(true)\r\n        e.preventDefault()\r\n\r\n        try {\r\n            const added = await ipfs.add(file)\r\n            const url = `https://ipfs.infura.io/ipfs/${added.path}`\r\n            setUrl(url)\r\n            setFileUrl(url)\r\n            setUploaded(true)\r\n        } catch (err) {\r\n            console.log('Error uploading the file : ', err)\r\n        }\r\n        setLoading(false)\r\n    }\r\n\r\n    const preUpload = (e) => {\r\n        if (e.target.value !== '') {\r\n            setFile(e.target.files[0])\r\n        } else {\r\n            setFile({})\r\n        }\r\n    }\r\n\r\n    const fileAndUploadButton = () => {\r\n        if (file.name) {\r\n            if (!loading) {\r\n                return (\r\n                    <div>\r\n                        <h5>\r\n                            {file.name} <Badge pill>{file.size} kb</Badge>\r\n                        </h5>\r\n\r\n                        {uploaded ? (\r\n                            <h5>\r\n                                ✅{' '}\r\n                                <a\r\n                                    href={fileUrl}\r\n                                    target='_blank'\r\n                                    rel='noopener noreferrer'\r\n                                >\r\n                                    File\r\n                                </a>{' '}\r\n                                Uploaded Successfully ✅\r\n                            </h5>\r\n                        ) : (\r\n                            <Button type='submit'>Upload File</Button>\r\n                        )}\r\n                    </div>\r\n                )\r\n            } else {\r\n                return (\r\n                    <Container>\r\n                        <h4>Uploading File</h4>\r\n                        <ProgressBar animated now={100} />\r\n                        <h4>Please Wait ...</h4>\r\n                    </Container>\r\n                )\r\n            }\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <Form onSubmit={uploadFile}>\r\n                <Form.Control\r\n                    required\r\n                    type='file'\r\n                    onChange={(e) => preUpload(e)}\r\n                    className='mb-3'\r\n                />\r\n\r\n                {fileAndUploadButton()}\r\n            </Form>\r\n        </div>\r\n    )\r\n}\r\n","import React, { useState } from 'react'\r\nimport { create as ipfsHttpClient } from 'ipfs-http-client'\r\nimport {\r\n    Form,\r\n    ListGroup,\r\n    Badge,\r\n    Button,\r\n    ProgressBar,\r\n    Container\r\n} from 'react-bootstrap'\r\nconst ipfs = ipfsHttpClient('https://ipfs.infura.io:5001/api/v0')\r\nconst all = require('it-all')\r\n\r\nexport const MultipleFilesUpload = ({ setUrl }) => {\r\n    const [files, setFiles] = useState([])\r\n    const [filesUrl, setFilesUrl] = useState('')\r\n    const [loading, setLoading] = useState(false)\r\n    const [uploaded, setUploaded] = useState(false)\r\n\r\n    const uploadFiles = async () => {\r\n        let fileObjectsArray = Array.from(files).map((file) => {\r\n            return {\r\n                path: file.name,\r\n                content: file\r\n            }\r\n        })\r\n\r\n        const results = await all(\r\n            ipfs.addAll(fileObjectsArray, { wrapWithDirectory: true })\r\n        )\r\n\r\n        console.log(results)\r\n        return results\r\n    }\r\n\r\n    const returnFilesUrl = async (e) => {\r\n        setLoading(true)\r\n        e.preventDefault()\r\n\r\n        const results = await uploadFiles(files)\r\n        const length = results.length\r\n        const FilesHash = results[length - 1].cid._baseCache.get('z')\r\n        const FilesUrl = 'https://ipfs.infura.io/ipfs/' + FilesHash\r\n        setUrl(FilesUrl)\r\n        setFilesUrl(FilesUrl)\r\n        setLoading(false)\r\n        setUploaded(true)\r\n    }\r\n\r\n    const filesAndUploadButton = () => {\r\n        if (files.length !== 0) {\r\n            if (!loading) {\r\n                return (\r\n                    <div>\r\n                        {uploaded ? (\r\n                            <h5>\r\n                                ✅{' '}\r\n                                <a\r\n                                    href={filesUrl}\r\n                                    target='_blank'\r\n                                    rel='noopener noreferrer'\r\n                                >\r\n                                    Files\r\n                                </a>{' '}\r\n                                Uploaded Successfully ✅\r\n                            </h5>\r\n                        ) : (\r\n                            <div>\r\n                                <Button className='mb-3' type='submit'>\r\n                                    Upload Files\r\n                                </Button>\r\n\r\n                                <ListGroup className='mb-3'>\r\n                                    {Array.from(files).map((file) => {\r\n                                        return (\r\n                                            <ListGroup.Item\r\n                                                as='li'\r\n                                                className='d-flex justify-content-between align-items-start'\r\n                                            >\r\n                                                <div className='ms-2 me-auto'>\r\n                                                    {file.name}\r\n                                                </div>\r\n                                                <Badge pill>\r\n                                                    {file.size} kb\r\n                                                </Badge>\r\n                                            </ListGroup.Item>\r\n                                        )\r\n                                    })}\r\n                                </ListGroup>\r\n                            </div>\r\n                        )}\r\n                    </div>\r\n                )\r\n            } else {\r\n                return (\r\n                    <Container>\r\n                        <h4>Uploading Files</h4>\r\n                        <ProgressBar animated now={100} />\r\n                        <h4>Please Wait ...</h4>\r\n                    </Container>\r\n                )\r\n            }\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <Form onSubmit={returnFilesUrl}>\r\n                <Form.Control\r\n                    required\r\n                    type='file'\r\n                    multiple\r\n                    onChange={(e) => setFiles(e.target.files)}\r\n                    className='mb-3'\r\n                />\r\n\r\n                {filesAndUploadButton()}\r\n            </Form>\r\n        </div>\r\n    )\r\n}\r\n","import React, { useState } from 'react'\r\nimport { create as ipfsHttpClient } from 'ipfs-http-client'\r\nimport {\r\n    Form,\r\n    ListGroup,\r\n    Badge,\r\n    Button,\r\n    ProgressBar,\r\n    Container\r\n} from 'react-bootstrap'\r\nconst ipfs = ipfsHttpClient('https://ipfs.infura.io:5001/api/v0')\r\nconst all = require('it-all')\r\n\r\nexport const FolderUpload = ({ setUrl }) => {\r\n    const [files, setFiles] = useState([])\r\n    const [folderUrl, setFolderUrl] = useState('')\r\n    const [loading, setLoading] = useState(false)\r\n    const [uploaded, setUploaded] = useState(false)\r\n\r\n    const uploadFiles = async () => {\r\n        let fileObjectsArray = Array.from(files).map((file) => {\r\n            return {\r\n                path: file.name,\r\n                content: file\r\n            }\r\n        })\r\n\r\n        const results = await all(\r\n            ipfs.addAll(fileObjectsArray, { wrapWithDirectory: true })\r\n        )\r\n\r\n        console.log(results)\r\n        return results\r\n    }\r\n\r\n    const returnFilesUrl = async (e) => {\r\n        setLoading(true)\r\n        e.preventDefault()\r\n\r\n        const results = await uploadFiles(files)\r\n        const length = results.length\r\n        const FilesHash = results[length - 1].cid._baseCache.get('z')\r\n        const FilesUrl = 'https://ipfs.infura.io/ipfs/' + FilesHash\r\n        console.log(FilesUrl)\r\n        setUrl(FilesUrl)\r\n        setFolderUrl(FilesUrl)\r\n        setLoading(false)\r\n        setUploaded(true)\r\n    }\r\n\r\n    const filesAndUploadButton = () => {\r\n        if (files.length !== 0) {\r\n            if (!loading) {\r\n                return (\r\n                    <div>\r\n                        {uploaded ? (\r\n                            <h5>\r\n                                ✅{' '}\r\n                                <a\r\n                                    href={folderUrl}\r\n                                    target='_blank'\r\n                                    rel='noopener noreferrer'\r\n                                >\r\n                                    Folder\r\n                                </a>{' '}\r\n                                Uploaded Successfully ✅\r\n                            </h5>\r\n                        ) : (\r\n                            <div>\r\n                                <Button type='submit' className='mb-3'>\r\n                                    Upload Folder\r\n                                </Button>\r\n\r\n                                <ListGroup className='mb-3'>\r\n                                    {Array.from(files).map((file) => {\r\n                                        return (\r\n                                            <ListGroup.Item\r\n                                                as='li'\r\n                                                className='d-flex justify-content-between align-items-start'\r\n                                            >\r\n                                                <div className='ms-2 me-auto'>\r\n                                                    {file.name}\r\n                                                </div>\r\n                                                <Badge pill>\r\n                                                    {file.size} kb\r\n                                                </Badge>\r\n                                            </ListGroup.Item>\r\n                                        )\r\n                                    })}\r\n                                </ListGroup>\r\n                            </div>\r\n                        )}\r\n                    </div>\r\n                )\r\n            } else {\r\n                return (\r\n                    <Container>\r\n                        <h4>Uploading Folder</h4>\r\n                        <ProgressBar animated now={100} />\r\n                        <h4>Please Wait ...</h4>\r\n                    </Container>\r\n                )\r\n            }\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <Form onSubmit={returnFilesUrl}>\r\n                <Form.Control\r\n                    required\r\n                    type='file'\r\n                    webkitdirectory='true'\r\n                    multiple\r\n                    onChange={(e) => setFiles(e.target.files)}\r\n                    className='mb-3'\r\n                />\r\n\r\n                {filesAndUploadButton()}\r\n            </Form>\r\n        </div>\r\n    )\r\n}\r\n","import React, { useState } from 'react'\r\nimport {\r\n    Form,\r\n    Image,\r\n    Button,\r\n    ProgressBar,\r\n    Container,\r\n    Badge\r\n} from 'react-bootstrap'\r\nimport { create as ipfsHttpClient } from 'ipfs-http-client'\r\nconst ipfs = ipfsHttpClient('https://ipfs.infura.io:5001/api/v0')\r\n\r\nexport const ImageUpload = ({ setUrl }) => {\r\n    const [image, setImage] = useState({})\r\n    const [imagePreview, setImagePreview] = useState('')\r\n    const [loading, setLoading] = useState(false)\r\n    const [uploaded, setUploaded] = useState(false)\r\n\r\n    const createPreview = (e) => {\r\n        if (e.target.value !== '') {\r\n            setImage(e.target.files[0])\r\n            const src = URL.createObjectURL(e.target.files[0])\r\n            setImagePreview(src)\r\n        } else {\r\n            setImagePreview('')\r\n        }\r\n    }\r\n\r\n    const uploadFile = async (e) => {\r\n        setLoading(true)\r\n        e.preventDefault()\r\n\r\n        try {\r\n            const added = await ipfs.add(image)\r\n            const url = `https://ipfs.infura.io/ipfs/${added.path}`\r\n            setUrl(url)\r\n            setImagePreview(url)\r\n            setUploaded(true)\r\n        } catch (err) {\r\n            console.log('Error uploading the file : ', err)\r\n        }\r\n        setLoading(false)\r\n    }\r\n\r\n    const previewAndUploadButton = () => {\r\n        if (imagePreview !== '') {\r\n            if (!loading) {\r\n                return (\r\n                    <div>\r\n                        {uploaded ? (\r\n                            <h5>\r\n                                ✅{' '}\r\n                                <a\r\n                                    href={imagePreview}\r\n                                    target='_blank'\r\n                                    rel='noopener noreferrer'\r\n                                >\r\n                                    Image\r\n                                </a>{' '}\r\n                                Uploaded Successfully ✅{' '}\r\n                            </h5>\r\n                        ) : (\r\n                            <div>\r\n                                <Button type='submit' className='mb-3'>\r\n                                    Upload Image\r\n                                </Button>\r\n                                <br />\r\n                                <h5>\r\n                                    {image.name}{' '}\r\n                                    <Badge pill>{image.size} kb</Badge>\r\n                                </h5>\r\n\r\n                                <Image\r\n                                    style={{ height: '300px' }}\r\n                                    className='mb-3'\r\n                                    src={imagePreview}\r\n                                    thumbnail\r\n                                />\r\n                            </div>\r\n                        )}\r\n                    </div>\r\n                )\r\n            } else {\r\n                return (\r\n                    <Container>\r\n                        <h4>Uploading Image</h4>\r\n                        <ProgressBar animated now={100} />\r\n                        <h4>Please Wait ...</h4>\r\n                    </Container>\r\n                )\r\n            }\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <Form onSubmit={uploadFile}>\r\n                <Form.Control\r\n                    required\r\n                    type='file'\r\n                    accept='image/*'\r\n                    onChange={(e) => createPreview(e)}\r\n                    className='mb-3'\r\n                />\r\n\r\n                {previewAndUploadButton()}\r\n            </Form>\r\n        </div>\r\n    )\r\n}\r\n","import React, { useState } from 'react'\r\nimport { Form, Button, ProgressBar, Container, Badge } from 'react-bootstrap'\r\nimport { create as ipfsHttpClient } from 'ipfs-http-client'\r\nconst ipfs = ipfsHttpClient('https://ipfs.infura.io:5001/api/v0')\r\n\r\nexport const PdfUpload = ({ setUrl }) => {\r\n    const [pdf, setPdf] = useState({})\r\n    const [pdfPreview, setPdfPreview] = useState('')\r\n    const [loading, setLoading] = useState(false)\r\n    const [uploaded, setUploaded] = useState(false)\r\n\r\n    const createPreview = (e) => {\r\n        if (e.target.value !== '') {\r\n            setPdf(e.target.files[0])\r\n            const src = URL.createObjectURL(e.target.files[0])\r\n            setPdfPreview(src)\r\n        } else {\r\n            setPdfPreview('')\r\n        }\r\n    }\r\n\r\n    const uploadFile = async (e) => {\r\n        setLoading(true)\r\n        e.preventDefault()\r\n\r\n        try {\r\n            const added = await ipfs.add(pdf)\r\n            const url = `https://ipfs.infura.io/ipfs/${added.path}`\r\n            setPdfPreview(url)\r\n            setUrl(url)\r\n            setUploaded(true)\r\n        } catch (err) {\r\n            console.log('Error uploading the file : ', err)\r\n        }\r\n        setLoading(false)\r\n    }\r\n\r\n    const previewAndUploadButton = () => {\r\n        if (pdfPreview !== '') {\r\n            if (!loading) {\r\n                return (\r\n                    <div>\r\n                        {uploaded ? (\r\n                            <h5>\r\n                                ✅{' '}\r\n                                <a\r\n                                    href={pdfPreview}\r\n                                    s\r\n                                    target='_blank'\r\n                                    rel='noopener noreferrer'\r\n                                >\r\n                                    PDF\r\n                                </a>{' '}\r\n                                Uploaded Successfully ✅\r\n                            </h5>\r\n                        ) : (\r\n                            <div>\r\n                                <Button type='submit' className='mb-3'>\r\n                                    Upload PDF\r\n                                </Button>\r\n                                <br />\r\n                                <h5>\r\n                                    {pdf.name} <Badge pill>{pdf.size} kb</Badge>\r\n                                </h5>\r\n\r\n                                <embed\r\n                                    width='75%'\r\n                                    height='400px'\r\n                                    className='mb-3'\r\n                                    src={pdfPreview}\r\n                                ></embed>\r\n                            </div>\r\n                        )}\r\n                    </div>\r\n                )\r\n            } else {\r\n                return (\r\n                    <Container>\r\n                        <h4>Uploading PDF</h4>\r\n                        <ProgressBar animated now={100} />\r\n                        <h4>Please Wait ...</h4>\r\n                    </Container>\r\n                )\r\n            }\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <Form onSubmit={uploadFile}>\r\n                <Form.Control\r\n                    required\r\n                    type='file'\r\n                    accept='application/pdf'\r\n                    onChange={(e) => createPreview(e)}\r\n                    className='mb-3'\r\n                />\r\n\r\n                {previewAndUploadButton()}\r\n            </Form>\r\n        </div>\r\n    )\r\n}\r\n","import React, { useState } from 'react'\r\nimport { Form, Button, ProgressBar, Container } from 'react-bootstrap'\r\nimport { create as ipfsHttpClient } from 'ipfs-http-client'\r\nconst ipfs = ipfsHttpClient('https://ipfs.infura.io:5001/api/v0')\r\n\r\nexport const TextUpload = ({ setUrl }) => {\r\n    const [text, setText] = useState('')\r\n    const [loading, setLoading] = useState(false)\r\n    const [uploaded, setUploaded] = useState(false)\r\n    const [textUrl, setTextUrl] = useState('')\r\n\r\n    const uploadText = async (e) => {\r\n        setLoading(true)\r\n        e.preventDefault()\r\n\r\n        try {\r\n            const added = await ipfs.add(text)\r\n            const url = `https://ipfs.infura.io/ipfs/${added.path}`\r\n            setTextUrl(url)\r\n            setUrl(url)\r\n            setUploaded(true)\r\n        } catch (err) {\r\n            console.log('Error uploading the file : ', err)\r\n        }\r\n        setLoading(false)\r\n    }\r\n\r\n    const uploadButtonLoading = () => {\r\n        if (text === '') return\r\n\r\n        if (uploaded) {\r\n            return (\r\n                <h5>\r\n                    ✅{' '}\r\n                    <a href={textUrl} target='_blank' rel='noopener noreferrer'>\r\n                        Text\r\n                    </a>{' '}\r\n                    Uploaded Successfully ✅\r\n                </h5>\r\n            )\r\n        } else {\r\n            if (loading) {\r\n                return (\r\n                    <Container>\r\n                        <h4>Uploading Text</h4>\r\n                        <ProgressBar animated now={100} />\r\n                        <h4>Please Wait ...</h4>\r\n                    </Container>\r\n                )\r\n            } else {\r\n                return <Button type='submit'>Upload Text</Button>\r\n            }\r\n        }\r\n    }\r\n\r\n    const textForm = () => {\r\n        if (loading || uploaded) {\r\n            return (\r\n                <Form>\r\n                    <Form.Group className='mb-3'>\r\n                        <Form.Label>Enter the Text :</Form.Label>\r\n\r\n                        <Form.Control\r\n                            onChange={(e) => setText(e.target.value)}\r\n                            readOnly\r\n                            as='textarea'\r\n                            rows={3}\r\n                        />\r\n                    </Form.Group>\r\n\r\n                    {uploadButtonLoading()}\r\n                </Form>\r\n            )\r\n        } else {\r\n            return (\r\n                <Form onSubmit={uploadText}>\r\n                    <Form.Group className='mb-3'>\r\n                        <Form.Label>Enter the Text :</Form.Label>\r\n\r\n                        <Form.Control\r\n                            onChange={(e) => setText(e.target.value)}\r\n                            required\r\n                            as='textarea'\r\n                            rows={3}\r\n                        />\r\n                    </Form.Group>\r\n\r\n                    {uploadButtonLoading()}\r\n                </Form>\r\n            )\r\n        }\r\n    }\r\n\r\n    return <div>{textForm()}</div>\r\n}\r\n"],"names":["ipfs","ipfsHttpClient","FileUpload","setUrl","useState","file","setFile","fileUrl","setFileUrl","loading","setLoading","uploaded","setUploaded","uploadFile","e","preventDefault","add","added","url","path","err","console","log","preUpload","target","value","files","fileAndUploadButton","name","size","all","require","MultipleFilesUpload","setFiles","filesUrl","setFilesUrl","uploadFiles","fileObjectsArray","Array","from","map","content","addAll","wrapWithDirectory","results","returnFilesUrl","length","FilesHash","cid","_baseCache","get","FilesUrl","filesAndUploadButton","FolderUpload","folderUrl","setFolderUrl","ImageUpload","image","setImage","imagePreview","setImagePreview","createPreview","src","URL","createObjectURL","previewAndUploadButton","height","PdfUpload","pdf","setPdf","pdfPreview","setPdfPreview","TextUpload","text","setText","textUrl","setTextUrl","uploadText","uploadButtonLoading","textForm"],"mappings":"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"}