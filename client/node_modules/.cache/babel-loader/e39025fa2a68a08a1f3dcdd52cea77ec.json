{"ast":null,"code":"import SignData from './SignData';\n\nconst AuthValidation = async (username, accountAddress, password, digiCode, web3, contract1) => {\n  let userAddress = await contract1.methods.getUserAddress().call({\n    from: accountAddress\n  });\n\n  if (userAddress.toLowerCase() !== accountAddress.toLowerCase()) {\n    return false;\n  } else {\n    let signedData = await SignData(username, accountAddress, web3);\n    let passwordDigiCodeHash = await web3.eth.accounts.hashMessage(password + digiCode);\n    let hash = await web3.eth.accounts.hashMessage(signedData + passwordDigiCodeHash); // get hash from the contract\n\n    let hashFromContract = await contract1.methods.getSignatureHash().call({\n      from: accountAddress\n    });\n\n    if (hash === hashFromContract) {\n      return true;\n    } else {\n      return false;\n    }\n  }\n};\n\nexport default AuthValidation;","map":{"version":3,"sources":["D:/reactDAPP/client/src/utils/AuthValidation.js"],"names":["SignData","AuthValidation","username","accountAddress","password","digiCode","web3","contract1","userAddress","methods","getUserAddress","call","from","toLowerCase","signedData","passwordDigiCodeHash","eth","accounts","hashMessage","hash","hashFromContract","getSignatureHash"],"mappings":"AAAA,OAAOA,QAAP,MAAqB,YAArB;;AAEA,MAAMC,cAAc,GAAG,OAAOC,QAAP,EAAiBC,cAAjB,EAAiCC,QAAjC,EAA2CC,QAA3C,EAAqDC,IAArD,EAA2DC,SAA3D,KAAyE;AAE5F,MAAIC,WAAW,GAAG,MAAMD,SAAS,CAACE,OAAV,CAAkBC,cAAlB,GAAmCC,IAAnC,CAAwC;AAAEC,IAAAA,IAAI,EAAET;AAAR,GAAxC,CAAxB;;AAEA,MAAIK,WAAW,CAACK,WAAZ,OAA8BV,cAAc,CAACU,WAAf,EAAlC,EAAgE;AAC5D,WAAO,KAAP;AACH,GAFD,MAEO;AACH,QAAIC,UAAU,GAAG,MAAMd,QAAQ,CAACE,QAAD,EAAWC,cAAX,EAA2BG,IAA3B,CAA/B;AACA,QAAIS,oBAAoB,GAAG,MAAMT,IAAI,CAACU,GAAL,CAASC,QAAT,CAAkBC,WAAlB,CAA8Bd,QAAQ,GAAGC,QAAzC,CAAjC;AAEA,QAAIc,IAAI,GAAG,MAAMb,IAAI,CAACU,GAAL,CAASC,QAAT,CAAkBC,WAAlB,CAA8BJ,UAAU,GAAGC,oBAA3C,CAAjB,CAJG,CAMH;;AACA,QAAIK,gBAAgB,GAAG,MAAMb,SAAS,CAACE,OAAV,CAAkBY,gBAAlB,GAAqCV,IAArC,CAA0C;AAAEC,MAAAA,IAAI,EAAET;AAAR,KAA1C,CAA7B;;AAEA,QAAIgB,IAAI,KAAKC,gBAAb,EAA+B;AAC3B,aAAO,IAAP;AACH,KAFD,MAEO;AACH,aAAO,KAAP;AACH;AACJ;AACJ,CArBD;;AAuBA,eAAenB,cAAf","sourcesContent":["import SignData from './SignData';\r\n\r\nconst AuthValidation = async (username, accountAddress, password, digiCode, web3, contract1) => {\r\n\r\n    let userAddress = await contract1.methods.getUserAddress().call({ from: accountAddress });\r\n\r\n    if (userAddress.toLowerCase() !== accountAddress.toLowerCase()) {\r\n        return false;\r\n    } else {\r\n        let signedData = await SignData(username, accountAddress, web3);\r\n        let passwordDigiCodeHash = await web3.eth.accounts.hashMessage(password + digiCode);\r\n\r\n        let hash = await web3.eth.accounts.hashMessage(signedData + passwordDigiCodeHash);\r\n\r\n        // get hash from the contract\r\n        let hashFromContract = await contract1.methods.getSignatureHash().call({ from: accountAddress });\r\n\r\n        if (hash === hashFromContract) {\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n}\r\n\r\nexport default AuthValidation;"]},"metadata":{},"sourceType":"module"}