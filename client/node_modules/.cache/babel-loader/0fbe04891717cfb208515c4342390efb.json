{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\n\nvar configure = require('../lib/configure.js');\n\nvar toUrlSearchParams = require('../lib/to-url-search-params.js');\n\nvar abortSignal = require('../lib/abort-signal.js');\n\nvar multipartRequest = require('ipfs-core-utils/multipart-request');\n\nvar nativeAbortController = require('native-abort-controller');\n\nvar cid = require('multiformats/cid');\n\nconst createImport = configure.configure(api => {\n  async function* dagImport(source, options = {}) {\n    const controller = new nativeAbortController.AbortController();\n    const signal = abortSignal.abortSignal(controller.signal, options.signal);\n\n    const _ref = await multipartRequest.multipartRequest(source, controller, options.headers),\n          headers = _ref.headers,\n          body = _ref.body;\n\n    const res = await api.post('dag/import', {\n      signal,\n      headers,\n      body,\n      searchParams: toUrlSearchParams.toUrlSearchParams({\n        'pin-roots': options.pinRoots\n      })\n    });\n\n    for await (const _ref2 of res.ndjson()) {\n      const Root = _ref2.Root;\n\n      if (Root !== undefined) {\n        const Cid = Root.Cid['/'],\n              PinErrorMsg = Root.PinErrorMsg;\n        yield {\n          root: {\n            cid: cid.CID.parse(Cid),\n            pinErrorMsg: PinErrorMsg\n          }\n        };\n      }\n    }\n  }\n\n  return dagImport;\n});\nexports.createImport = createImport;","map":null,"metadata":{},"sourceType":"script"}