{"ast":null,"code":"import React, { useState } from 'react';\nimport { Form, Badge, Button, Container, ProgressBar, ListGroup, Image } from 'react-bootstrap';\nimport { create } from 'ipfs-http-client';\nimport 'bootstrap/dist/css/bootstrap.min.css'; // A type of promise-like that resolves synchronously and supports only one observer\n\nconst _iteratorSymbol =\n/*#__PURE__*/\ntypeof Symbol !== \"undefined\" ? Symbol.iterator || (Symbol.iterator = Symbol(\"Symbol.iterator\")) : \"@@iterator\";\n\nconst _asyncIteratorSymbol =\n/*#__PURE__*/\ntypeof Symbol !== \"undefined\" ? Symbol.asyncIterator || (Symbol.asyncIterator = Symbol(\"Symbol.asyncIterator\")) : \"@@asyncIterator\"; // Asynchronously call a function and send errors to recovery continuation\n\n\nfunction _catch(body, recover) {\n  try {\n    var result = body();\n  } catch (e) {\n    return recover(e);\n  }\n\n  if (result && result.then) {\n    return result.then(void 0, recover);\n  }\n\n  return result;\n}\n\nvar ipfs = create('https://ipfs.infura.io:5001/api/v0');\n\nvar FileUpload = function FileUpload(_ref) {\n  var setUrl = _ref.setUrl;\n\n  var _useState = useState({}),\n      file = _useState[0],\n      setFile = _useState[1];\n\n  var _useState2 = useState(''),\n      fileUrl = _useState2[0],\n      setFileUrl = _useState2[1];\n\n  var _useState3 = useState(false),\n      loading = _useState3[0],\n      setLoading = _useState3[1];\n\n  var _useState4 = useState(false),\n      uploaded = _useState4[0],\n      setUploaded = _useState4[1];\n\n  var uploadFile = function uploadFile(e) {\n    try {\n      var _temp3 = function _temp3() {\n        setLoading(false);\n      };\n\n      setLoading(true);\n      e.preventDefault();\n\n      var _temp4 = _catch(function () {\n        return Promise.resolve(ipfs.add(file)).then(function (added) {\n          var url = \"https://ipfs.infura.io/ipfs/\" + added.path;\n          setUrl(url);\n          setFileUrl(url);\n          setUploaded(true);\n        });\n      }, function (err) {\n        console.log('Error uploading the file : ', err);\n      });\n\n      return Promise.resolve(_temp4 && _temp4.then ? _temp4.then(_temp3) : _temp3(_temp4));\n    } catch (e) {\n      return Promise.reject(e);\n    }\n  };\n\n  var preUpload = function preUpload(e) {\n    if (e.target.value !== '') {\n      setFile(e.target.files[0]);\n    } else {\n      setFile({});\n    }\n  };\n\n  var fileAndUploadButton = function fileAndUploadButton() {\n    if (file.name) {\n      if (!loading) {\n        return (\n          /*#__PURE__*/\n          React.createElement(\"div\", null,\n          /*#__PURE__*/\n          React.createElement(\"h5\", null, file.name, \" \",\n          /*#__PURE__*/\n          React.createElement(Badge, {\n            pill: true\n          }, file.size, \" kb\")), uploaded ?\n          /*#__PURE__*/\n          React.createElement(\"h5\", null, \"\\u2705\", ' ',\n          /*#__PURE__*/\n          React.createElement(\"a\", {\n            href: fileUrl,\n            target: \"_blank\",\n            rel: \"noopener noreferrer\"\n          }, \"File\"), ' ', \"Uploaded Successfully \\u2705\") :\n          /*#__PURE__*/\n          React.createElement(Button, {\n            type: \"submit\"\n          }, \"Upload File\"))\n        );\n      } else {\n        return (\n          /*#__PURE__*/\n          React.createElement(Container, null,\n          /*#__PURE__*/\n          React.createElement(\"h4\", null, \"Uploading File\"),\n          /*#__PURE__*/\n          React.createElement(ProgressBar, {\n            animated: true,\n            now: 100\n          }),\n          /*#__PURE__*/\n          React.createElement(\"h4\", null, \"Please Wait ...\"))\n        );\n      }\n    }\n  };\n\n  return (\n    /*#__PURE__*/\n    React.createElement(\"div\", null,\n    /*#__PURE__*/\n    React.createElement(Form, {\n      onSubmit: uploadFile\n    },\n    /*#__PURE__*/\n    React.createElement(Form.Control, {\n      required: true,\n      type: \"file\",\n      onChange: function onChange(e) {\n        return preUpload(e);\n      },\n      className: \"mb-3\"\n    }), fileAndUploadButton()))\n  );\n};\n\nvar ipfs$1 = create('https://ipfs.infura.io:5001/api/v0');\n\nvar all = require('it-all');\n\nvar MultipleFilesUpload = function MultipleFilesUpload(_ref) {\n  var setUrl = _ref.setUrl;\n\n  var _useState = useState([]),\n      files = _useState[0],\n      setFiles = _useState[1];\n\n  var _useState2 = useState(''),\n      filesUrl = _useState2[0],\n      setFilesUrl = _useState2[1];\n\n  var _useState3 = useState(false),\n      loading = _useState3[0],\n      setLoading = _useState3[1];\n\n  var _useState4 = useState(false),\n      uploaded = _useState4[0],\n      setUploaded = _useState4[1];\n\n  var uploadFiles = function uploadFiles() {\n    try {\n      var fileObjectsArray = Array.from(files).map(function (file) {\n        return {\n          path: file.name,\n          content: file\n        };\n      });\n      return Promise.resolve(all(ipfs$1.addAll(fileObjectsArray, {\n        wrapWithDirectory: true\n      }))).then(function (results) {\n        console.log(results);\n        return results;\n      });\n    } catch (e) {\n      return Promise.reject(e);\n    }\n  };\n\n  var returnFilesUrl = function returnFilesUrl(e) {\n    try {\n      setLoading(true);\n      e.preventDefault();\n      return Promise.resolve(uploadFiles(files)).then(function (results) {\n        var length = results.length;\n\n        var FilesHash = results[length - 1].cid._baseCache.get('z');\n\n        var FilesUrl = 'https://ipfs.infura.io/ipfs/' + FilesHash;\n        setUrl(FilesUrl);\n        setFilesUrl(FilesUrl);\n        setLoading(false);\n        setUploaded(true);\n      });\n    } catch (e) {\n      return Promise.reject(e);\n    }\n  };\n\n  var filesAndUploadButton = function filesAndUploadButton() {\n    if (files.length !== 0) {\n      if (!loading) {\n        return (\n          /*#__PURE__*/\n          React.createElement(\"div\", null, uploaded ?\n          /*#__PURE__*/\n          React.createElement(\"h5\", null, \"\\u2705\", ' ',\n          /*#__PURE__*/\n          React.createElement(\"a\", {\n            href: filesUrl,\n            target: \"_blank\",\n            rel: \"noopener noreferrer\"\n          }, \"Files\"), ' ', \"Uploaded Successfully \\u2705\") :\n          /*#__PURE__*/\n          React.createElement(\"div\", null,\n          /*#__PURE__*/\n          React.createElement(Button, {\n            className: \"mb-3\",\n            type: \"submit\"\n          }, \"Upload Files\"),\n          /*#__PURE__*/\n          React.createElement(ListGroup, {\n            className: \"mb-3\"\n          }, Array.from(files).map(function (file) {\n            return (\n              /*#__PURE__*/\n              React.createElement(ListGroup.Item, {\n                as: \"li\",\n                className: \"d-flex justify-content-between align-items-start\"\n              },\n              /*#__PURE__*/\n              React.createElement(\"div\", {\n                className: \"ms-2 me-auto\"\n              }, file.name),\n              /*#__PURE__*/\n              React.createElement(Badge, {\n                pill: true\n              }, file.size, \" kb\"))\n            );\n          }))))\n        );\n      } else {\n        return (\n          /*#__PURE__*/\n          React.createElement(Container, null,\n          /*#__PURE__*/\n          React.createElement(\"h4\", null, \"Uploading Files\"),\n          /*#__PURE__*/\n          React.createElement(ProgressBar, {\n            animated: true,\n            now: 100\n          }),\n          /*#__PURE__*/\n          React.createElement(\"h4\", null, \"Please Wait ...\"))\n        );\n      }\n    }\n  };\n\n  return (\n    /*#__PURE__*/\n    React.createElement(\"div\", null,\n    /*#__PURE__*/\n    React.createElement(Form, {\n      onSubmit: returnFilesUrl\n    },\n    /*#__PURE__*/\n    React.createElement(Form.Control, {\n      required: true,\n      type: \"file\",\n      multiple: true,\n      onChange: function onChange(e) {\n        return setFiles(e.target.files);\n      },\n      className: \"mb-3\"\n    }), filesAndUploadButton()))\n  );\n};\n\nvar ipfs$2 = create('https://ipfs.infura.io:5001/api/v0');\n\nvar all$1 = require('it-all');\n\nvar FolderUpload = function FolderUpload(_ref) {\n  var setUrl = _ref.setUrl;\n\n  var _useState = useState([]),\n      files = _useState[0],\n      setFiles = _useState[1];\n\n  var _useState2 = useState(''),\n      folderUrl = _useState2[0],\n      setFolderUrl = _useState2[1];\n\n  var _useState3 = useState(false),\n      loading = _useState3[0],\n      setLoading = _useState3[1];\n\n  var _useState4 = useState(false),\n      uploaded = _useState4[0],\n      setUploaded = _useState4[1];\n\n  var uploadFiles = function uploadFiles() {\n    try {\n      var fileObjectsArray = Array.from(files).map(function (file) {\n        return {\n          path: file.name,\n          content: file\n        };\n      });\n      return Promise.resolve(all$1(ipfs$2.addAll(fileObjectsArray, {\n        wrapWithDirectory: true\n      }))).then(function (results) {\n        console.log(results);\n        return results;\n      });\n    } catch (e) {\n      return Promise.reject(e);\n    }\n  };\n\n  var returnFilesUrl = function returnFilesUrl(e) {\n    try {\n      setLoading(true);\n      e.preventDefault();\n      return Promise.resolve(uploadFiles(files)).then(function (results) {\n        var length = results.length;\n\n        var FilesHash = results[length - 1].cid._baseCache.get('z');\n\n        var FilesUrl = 'https://ipfs.infura.io/ipfs/' + FilesHash;\n        console.log(FilesUrl);\n        setUrl(FilesUrl);\n        setFolderUrl(FilesUrl);\n        setLoading(false);\n        setUploaded(true);\n      });\n    } catch (e) {\n      return Promise.reject(e);\n    }\n  };\n\n  var filesAndUploadButton = function filesAndUploadButton() {\n    if (files.length !== 0) {\n      if (!loading) {\n        return (\n          /*#__PURE__*/\n          React.createElement(\"div\", null, uploaded ?\n          /*#__PURE__*/\n          React.createElement(\"h5\", null, \"\\u2705\", ' ',\n          /*#__PURE__*/\n          React.createElement(\"a\", {\n            href: folderUrl,\n            target: \"_blank\",\n            rel: \"noopener noreferrer\"\n          }, \"Folder\"), ' ', \"Uploaded Successfully \\u2705\") :\n          /*#__PURE__*/\n          React.createElement(\"div\", null,\n          /*#__PURE__*/\n          React.createElement(Button, {\n            type: \"submit\",\n            className: \"mb-3\"\n          }, \"Upload Folder\"),\n          /*#__PURE__*/\n          React.createElement(ListGroup, {\n            className: \"mb-3\"\n          }, Array.from(files).map(function (file) {\n            return (\n              /*#__PURE__*/\n              React.createElement(ListGroup.Item, {\n                as: \"li\",\n                className: \"d-flex justify-content-between align-items-start\"\n              },\n              /*#__PURE__*/\n              React.createElement(\"div\", {\n                className: \"ms-2 me-auto\"\n              }, file.name),\n              /*#__PURE__*/\n              React.createElement(Badge, {\n                pill: true\n              }, file.size, \" kb\"))\n            );\n          }))))\n        );\n      } else {\n        return (\n          /*#__PURE__*/\n          React.createElement(Container, null,\n          /*#__PURE__*/\n          React.createElement(\"h4\", null, \"Uploading Folder\"),\n          /*#__PURE__*/\n          React.createElement(ProgressBar, {\n            animated: true,\n            now: 100\n          }),\n          /*#__PURE__*/\n          React.createElement(\"h4\", null, \"Please Wait ...\"))\n        );\n      }\n    }\n  };\n\n  return (\n    /*#__PURE__*/\n    React.createElement(\"div\", null,\n    /*#__PURE__*/\n    React.createElement(Form, {\n      onSubmit: returnFilesUrl\n    },\n    /*#__PURE__*/\n    React.createElement(Form.Control, {\n      required: true,\n      type: \"file\",\n      webkitdirectory: \"true\",\n      multiple: true,\n      onChange: function onChange(e) {\n        return setFiles(e.target.files);\n      },\n      className: \"mb-3\"\n    }), filesAndUploadButton()))\n  );\n};\n\nvar ipfs$3 = create('https://ipfs.infura.io:5001/api/v0');\n\nvar ImageUpload = function ImageUpload(_ref) {\n  var setUrl = _ref.setUrl;\n\n  var _useState = useState({}),\n      image = _useState[0],\n      setImage = _useState[1];\n\n  var _useState2 = useState(''),\n      imagePreview = _useState2[0],\n      setImagePreview = _useState2[1];\n\n  var _useState3 = useState(false),\n      loading = _useState3[0],\n      setLoading = _useState3[1];\n\n  var _useState4 = useState(false),\n      uploaded = _useState4[0],\n      setUploaded = _useState4[1];\n\n  var createPreview = function createPreview(e) {\n    if (e.target.value !== '') {\n      setImage(e.target.files[0]);\n      var src = URL.createObjectURL(e.target.files[0]);\n      setImagePreview(src);\n    } else {\n      setImagePreview('');\n    }\n  };\n\n  var uploadFile = function uploadFile(e) {\n    try {\n      var _temp3 = function _temp3() {\n        setLoading(false);\n      };\n\n      setLoading(true);\n      e.preventDefault();\n\n      var _temp4 = _catch(function () {\n        return Promise.resolve(ipfs$3.add(image)).then(function (added) {\n          var url = \"https://ipfs.infura.io/ipfs/\" + added.path;\n          setUrl(url);\n          setImagePreview(url);\n          setUploaded(true);\n        });\n      }, function (err) {\n        console.log('Error uploading the file : ', err);\n      });\n\n      return Promise.resolve(_temp4 && _temp4.then ? _temp4.then(_temp3) : _temp3(_temp4));\n    } catch (e) {\n      return Promise.reject(e);\n    }\n  };\n\n  var previewAndUploadButton = function previewAndUploadButton() {\n    if (imagePreview !== '') {\n      if (!loading) {\n        return (\n          /*#__PURE__*/\n          React.createElement(\"div\", null, uploaded ?\n          /*#__PURE__*/\n          React.createElement(\"h5\", null, \"\\u2705\", ' ',\n          /*#__PURE__*/\n          React.createElement(\"a\", {\n            href: imagePreview,\n            target: \"_blank\",\n            rel: \"noopener noreferrer\"\n          }, \"Image\"), ' ', \"Uploaded Successfully \\u2705\", ' ') :\n          /*#__PURE__*/\n          React.createElement(\"div\", null,\n          /*#__PURE__*/\n          React.createElement(Button, {\n            type: \"submit\",\n            className: \"mb-3\"\n          }, \"Upload Image\"),\n          /*#__PURE__*/\n          React.createElement(\"br\", null),\n          /*#__PURE__*/\n          React.createElement(\"h5\", null, image.name, ' ',\n          /*#__PURE__*/\n          React.createElement(Badge, {\n            pill: true\n          }, image.size, \" kb\")),\n          /*#__PURE__*/\n          React.createElement(Image, {\n            style: {\n              height: '300px'\n            },\n            className: \"mb-3\",\n            src: imagePreview,\n            thumbnail: true\n          })))\n        );\n      } else {\n        return (\n          /*#__PURE__*/\n          React.createElement(Container, null,\n          /*#__PURE__*/\n          React.createElement(\"h4\", null, \"Uploading Image\"),\n          /*#__PURE__*/\n          React.createElement(ProgressBar, {\n            animated: true,\n            now: 100\n          }),\n          /*#__PURE__*/\n          React.createElement(\"h4\", null, \"Please Wait ...\"))\n        );\n      }\n    }\n  };\n\n  return (\n    /*#__PURE__*/\n    React.createElement(\"div\", null,\n    /*#__PURE__*/\n    React.createElement(Form, {\n      onSubmit: uploadFile\n    },\n    /*#__PURE__*/\n    React.createElement(Form.Control, {\n      required: true,\n      type: \"file\",\n      accept: \"image/*\",\n      onChange: function onChange(e) {\n        return createPreview(e);\n      },\n      className: \"mb-3\"\n    }), previewAndUploadButton()))\n  );\n};\n\nvar ipfs$4 = create('https://ipfs.infura.io:5001/api/v0');\n\nvar PdfUpload = function PdfUpload(_ref) {\n  var setUrl = _ref.setUrl;\n\n  var _useState = useState({}),\n      pdf = _useState[0],\n      setPdf = _useState[1];\n\n  var _useState2 = useState(''),\n      pdfPreview = _useState2[0],\n      setPdfPreview = _useState2[1];\n\n  var _useState3 = useState(false),\n      loading = _useState3[0],\n      setLoading = _useState3[1];\n\n  var _useState4 = useState(false),\n      uploaded = _useState4[0],\n      setUploaded = _useState4[1];\n\n  var createPreview = function createPreview(e) {\n    if (e.target.value !== '') {\n      setPdf(e.target.files[0]);\n      var src = URL.createObjectURL(e.target.files[0]);\n      setPdfPreview(src);\n    } else {\n      setPdfPreview('');\n    }\n  };\n\n  var uploadFile = function uploadFile(e) {\n    try {\n      var _temp3 = function _temp3() {\n        setLoading(false);\n      };\n\n      setLoading(true);\n      e.preventDefault();\n\n      var _temp4 = _catch(function () {\n        return Promise.resolve(ipfs$4.add(pdf)).then(function (added) {\n          var url = \"https://ipfs.infura.io/ipfs/\" + added.path;\n          setPdfPreview(url);\n          setUrl(url);\n          setUploaded(true);\n        });\n      }, function (err) {\n        console.log('Error uploading the file : ', err);\n      });\n\n      return Promise.resolve(_temp4 && _temp4.then ? _temp4.then(_temp3) : _temp3(_temp4));\n    } catch (e) {\n      return Promise.reject(e);\n    }\n  };\n\n  var previewAndUploadButton = function previewAndUploadButton() {\n    if (pdfPreview !== '') {\n      if (!loading) {\n        return (\n          /*#__PURE__*/\n          React.createElement(\"div\", null, uploaded ?\n          /*#__PURE__*/\n          React.createElement(\"h5\", null, \"\\u2705\", ' ',\n          /*#__PURE__*/\n          React.createElement(\"a\", {\n            href: pdfPreview,\n            s: true,\n            target: \"_blank\",\n            rel: \"noopener noreferrer\"\n          }, \"PDF\"), ' ', \"Uploaded Successfully \\u2705\") :\n          /*#__PURE__*/\n          React.createElement(\"div\", null,\n          /*#__PURE__*/\n          React.createElement(Button, {\n            type: \"submit\",\n            className: \"mb-3\"\n          }, \"Upload PDF\"),\n          /*#__PURE__*/\n          React.createElement(\"br\", null),\n          /*#__PURE__*/\n          React.createElement(\"h5\", null, pdf.name, \" \",\n          /*#__PURE__*/\n          React.createElement(Badge, {\n            pill: true\n          }, pdf.size, \" kb\")),\n          /*#__PURE__*/\n          React.createElement(\"embed\", {\n            width: \"75%\",\n            height: \"400px\",\n            className: \"mb-3\",\n            src: pdfPreview\n          })))\n        );\n      } else {\n        return (\n          /*#__PURE__*/\n          React.createElement(Container, null,\n          /*#__PURE__*/\n          React.createElement(\"h4\", null, \"Uploading PDF\"),\n          /*#__PURE__*/\n          React.createElement(ProgressBar, {\n            animated: true,\n            now: 100\n          }),\n          /*#__PURE__*/\n          React.createElement(\"h4\", null, \"Please Wait ...\"))\n        );\n      }\n    }\n  };\n\n  return (\n    /*#__PURE__*/\n    React.createElement(\"div\", null,\n    /*#__PURE__*/\n    React.createElement(Form, {\n      onSubmit: uploadFile\n    },\n    /*#__PURE__*/\n    React.createElement(Form.Control, {\n      required: true,\n      type: \"file\",\n      accept: \"application/pdf\",\n      onChange: function onChange(e) {\n        return createPreview(e);\n      },\n      className: \"mb-3\"\n    }), previewAndUploadButton()))\n  );\n};\n\nvar ipfs$5 = create('https://ipfs.infura.io:5001/api/v0');\n\nvar TextUpload = function TextUpload(_ref) {\n  var setUrl = _ref.setUrl;\n\n  var _useState = useState(''),\n      text = _useState[0],\n      setText = _useState[1];\n\n  var _useState2 = useState(false),\n      loading = _useState2[0],\n      setLoading = _useState2[1];\n\n  var _useState3 = useState(false),\n      uploaded = _useState3[0],\n      setUploaded = _useState3[1];\n\n  var _useState4 = useState(''),\n      textUrl = _useState4[0],\n      setTextUrl = _useState4[1];\n\n  var uploadText = function uploadText(e) {\n    try {\n      var _temp3 = function _temp3() {\n        setLoading(false);\n      };\n\n      setLoading(true);\n      e.preventDefault();\n\n      var _temp4 = _catch(function () {\n        return Promise.resolve(ipfs$5.add(text)).then(function (added) {\n          var url = \"https://ipfs.infura.io/ipfs/\" + added.path;\n          setTextUrl(url);\n          setUrl(url);\n          setUploaded(true);\n        });\n      }, function (err) {\n        console.log('Error uploading the file : ', err);\n      });\n\n      return Promise.resolve(_temp4 && _temp4.then ? _temp4.then(_temp3) : _temp3(_temp4));\n    } catch (e) {\n      return Promise.reject(e);\n    }\n  };\n\n  var uploadButtonLoading = function uploadButtonLoading() {\n    if (text === '') return;\n\n    if (uploaded) {\n      return (\n        /*#__PURE__*/\n        React.createElement(\"h5\", null, \"\\u2705\", ' ',\n        /*#__PURE__*/\n        React.createElement(\"a\", {\n          href: textUrl,\n          target: \"_blank\",\n          rel: \"noopener noreferrer\"\n        }, \"Text\"), ' ', \"Uploaded Successfully \\u2705\")\n      );\n    } else {\n      if (loading) {\n        return (\n          /*#__PURE__*/\n          React.createElement(Container, null,\n          /*#__PURE__*/\n          React.createElement(\"h4\", null, \"Uploading Text\"),\n          /*#__PURE__*/\n          React.createElement(ProgressBar, {\n            animated: true,\n            now: 100\n          }),\n          /*#__PURE__*/\n          React.createElement(\"h4\", null, \"Please Wait ...\"))\n        );\n      } else {\n        return (\n          /*#__PURE__*/\n          React.createElement(Button, {\n            type: \"submit\"\n          }, \"Upload Text\")\n        );\n      }\n    }\n  };\n\n  var textForm = function textForm() {\n    if (loading || uploaded) {\n      return (\n        /*#__PURE__*/\n        React.createElement(Form, null,\n        /*#__PURE__*/\n        React.createElement(Form.Group, {\n          className: \"mb-3\"\n        },\n        /*#__PURE__*/\n        React.createElement(Form.Label, null, \"Enter the Text :\"),\n        /*#__PURE__*/\n        React.createElement(Form.Control, {\n          onChange: function onChange(e) {\n            return setText(e.target.value);\n          },\n          readOnly: true,\n          as: \"textarea\",\n          rows: 3\n        })), uploadButtonLoading())\n      );\n    } else {\n      return (\n        /*#__PURE__*/\n        React.createElement(Form, {\n          onSubmit: uploadText\n        },\n        /*#__PURE__*/\n        React.createElement(Form.Group, {\n          className: \"mb-3\"\n        },\n        /*#__PURE__*/\n        React.createElement(Form.Label, null, \"Enter the Text :\"),\n        /*#__PURE__*/\n        React.createElement(Form.Control, {\n          onChange: function onChange(e) {\n            return setText(e.target.value);\n          },\n          required: true,\n          as: \"textarea\",\n          rows: 3\n        })), uploadButtonLoading())\n      );\n    }\n  };\n\n  return (\n    /*#__PURE__*/\n    React.createElement(\"div\", null, textForm())\n  );\n};\n\nexport { FileUpload, FolderUpload, ImageUpload, MultipleFilesUpload, PdfUpload, TextUpload };","map":null,"metadata":{},"sourceType":"module"}