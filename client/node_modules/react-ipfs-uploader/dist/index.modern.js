import React, { useState } from 'react';
import { Form, Badge, Button, Container, ProgressBar, ListGroup, Image } from 'react-bootstrap';
import { create } from 'ipfs-http-client';
import 'bootstrap/dist/css/bootstrap.min.css';

// A type of promise-like that resolves synchronously and supports only one observer

const _iteratorSymbol = /*#__PURE__*/ typeof Symbol !== "undefined" ? (Symbol.iterator || (Symbol.iterator = Symbol("Symbol.iterator"))) : "@@iterator";

const _asyncIteratorSymbol = /*#__PURE__*/ typeof Symbol !== "undefined" ? (Symbol.asyncIterator || (Symbol.asyncIterator = Symbol("Symbol.asyncIterator"))) : "@@asyncIterator";

// Asynchronously call a function and send errors to recovery continuation
function _catch(body, recover) {
	try {
		var result = body();
	} catch(e) {
		return recover(e);
	}
	if (result && result.then) {
		return result.then(void 0, recover);
	}
	return result;
}

var ipfs = create('https://ipfs.infura.io:5001/api/v0');
var FileUpload = function FileUpload(_ref) {
  var setUrl = _ref.setUrl;

  var _useState = useState({}),
      file = _useState[0],
      setFile = _useState[1];

  var _useState2 = useState(''),
      fileUrl = _useState2[0],
      setFileUrl = _useState2[1];

  var _useState3 = useState(false),
      loading = _useState3[0],
      setLoading = _useState3[1];

  var _useState4 = useState(false),
      uploaded = _useState4[0],
      setUploaded = _useState4[1];

  var uploadFile = function uploadFile(e) {
    try {
      var _temp3 = function _temp3() {
        setLoading(false);
      };

      setLoading(true);
      e.preventDefault();

      var _temp4 = _catch(function () {
        return Promise.resolve(ipfs.add(file)).then(function (added) {
          var url = "https://ipfs.infura.io/ipfs/" + added.path;
          setUrl(url);
          setFileUrl(url);
          setUploaded(true);
        });
      }, function (err) {
        console.log('Error uploading the file : ', err);
      });

      return Promise.resolve(_temp4 && _temp4.then ? _temp4.then(_temp3) : _temp3(_temp4));
    } catch (e) {
      return Promise.reject(e);
    }
  };

  var preUpload = function preUpload(e) {
    if (e.target.value !== '') {
      setFile(e.target.files[0]);
    } else {
      setFile({});
    }
  };

  var fileAndUploadButton = function fileAndUploadButton() {
    if (file.name) {
      if (!loading) {
        return /*#__PURE__*/React.createElement("div", null, /*#__PURE__*/React.createElement("h5", null, file.name, " ", /*#__PURE__*/React.createElement(Badge, {
          pill: true
        }, file.size, " kb")), uploaded ? /*#__PURE__*/React.createElement("h5", null, "\u2705", ' ', /*#__PURE__*/React.createElement("a", {
          href: fileUrl,
          target: "_blank",
          rel: "noopener noreferrer"
        }, "File"), ' ', "Uploaded Successfully \u2705") : /*#__PURE__*/React.createElement(Button, {
          type: "submit"
        }, "Upload File"));
      } else {
        return /*#__PURE__*/React.createElement(Container, null, /*#__PURE__*/React.createElement("h4", null, "Uploading File"), /*#__PURE__*/React.createElement(ProgressBar, {
          animated: true,
          now: 100
        }), /*#__PURE__*/React.createElement("h4", null, "Please Wait ..."));
      }
    }
  };

  return /*#__PURE__*/React.createElement("div", null, /*#__PURE__*/React.createElement(Form, {
    onSubmit: uploadFile
  }, /*#__PURE__*/React.createElement(Form.Control, {
    required: true,
    type: "file",
    onChange: function onChange(e) {
      return preUpload(e);
    },
    className: "mb-3"
  }), fileAndUploadButton()));
};

var ipfs$1 = create('https://ipfs.infura.io:5001/api/v0');

var all = require('it-all');

var MultipleFilesUpload = function MultipleFilesUpload(_ref) {
  var setUrl = _ref.setUrl;

  var _useState = useState([]),
      files = _useState[0],
      setFiles = _useState[1];

  var _useState2 = useState(''),
      filesUrl = _useState2[0],
      setFilesUrl = _useState2[1];

  var _useState3 = useState(false),
      loading = _useState3[0],
      setLoading = _useState3[1];

  var _useState4 = useState(false),
      uploaded = _useState4[0],
      setUploaded = _useState4[1];

  var uploadFiles = function uploadFiles() {
    try {
      var fileObjectsArray = Array.from(files).map(function (file) {
        return {
          path: file.name,
          content: file
        };
      });
      return Promise.resolve(all(ipfs$1.addAll(fileObjectsArray, {
        wrapWithDirectory: true
      }))).then(function (results) {
        console.log(results);
        return results;
      });
    } catch (e) {
      return Promise.reject(e);
    }
  };

  var returnFilesUrl = function returnFilesUrl(e) {
    try {
      setLoading(true);
      e.preventDefault();
      return Promise.resolve(uploadFiles(files)).then(function (results) {
        var length = results.length;

        var FilesHash = results[length - 1].cid._baseCache.get('z');

        var FilesUrl = 'https://ipfs.infura.io/ipfs/' + FilesHash;
        setUrl(FilesUrl);
        setFilesUrl(FilesUrl);
        setLoading(false);
        setUploaded(true);
      });
    } catch (e) {
      return Promise.reject(e);
    }
  };

  var filesAndUploadButton = function filesAndUploadButton() {
    if (files.length !== 0) {
      if (!loading) {
        return /*#__PURE__*/React.createElement("div", null, uploaded ? /*#__PURE__*/React.createElement("h5", null, "\u2705", ' ', /*#__PURE__*/React.createElement("a", {
          href: filesUrl,
          target: "_blank",
          rel: "noopener noreferrer"
        }, "Files"), ' ', "Uploaded Successfully \u2705") : /*#__PURE__*/React.createElement("div", null, /*#__PURE__*/React.createElement(Button, {
          className: "mb-3",
          type: "submit"
        }, "Upload Files"), /*#__PURE__*/React.createElement(ListGroup, {
          className: "mb-3"
        }, Array.from(files).map(function (file) {
          return /*#__PURE__*/React.createElement(ListGroup.Item, {
            as: "li",
            className: "d-flex justify-content-between align-items-start"
          }, /*#__PURE__*/React.createElement("div", {
            className: "ms-2 me-auto"
          }, file.name), /*#__PURE__*/React.createElement(Badge, {
            pill: true
          }, file.size, " kb"));
        }))));
      } else {
        return /*#__PURE__*/React.createElement(Container, null, /*#__PURE__*/React.createElement("h4", null, "Uploading Files"), /*#__PURE__*/React.createElement(ProgressBar, {
          animated: true,
          now: 100
        }), /*#__PURE__*/React.createElement("h4", null, "Please Wait ..."));
      }
    }
  };

  return /*#__PURE__*/React.createElement("div", null, /*#__PURE__*/React.createElement(Form, {
    onSubmit: returnFilesUrl
  }, /*#__PURE__*/React.createElement(Form.Control, {
    required: true,
    type: "file",
    multiple: true,
    onChange: function onChange(e) {
      return setFiles(e.target.files);
    },
    className: "mb-3"
  }), filesAndUploadButton()));
};

var ipfs$2 = create('https://ipfs.infura.io:5001/api/v0');

var all$1 = require('it-all');

var FolderUpload = function FolderUpload(_ref) {
  var setUrl = _ref.setUrl;

  var _useState = useState([]),
      files = _useState[0],
      setFiles = _useState[1];

  var _useState2 = useState(''),
      folderUrl = _useState2[0],
      setFolderUrl = _useState2[1];

  var _useState3 = useState(false),
      loading = _useState3[0],
      setLoading = _useState3[1];

  var _useState4 = useState(false),
      uploaded = _useState4[0],
      setUploaded = _useState4[1];

  var uploadFiles = function uploadFiles() {
    try {
      var fileObjectsArray = Array.from(files).map(function (file) {
        return {
          path: file.name,
          content: file
        };
      });
      return Promise.resolve(all$1(ipfs$2.addAll(fileObjectsArray, {
        wrapWithDirectory: true
      }))).then(function (results) {
        console.log(results);
        return results;
      });
    } catch (e) {
      return Promise.reject(e);
    }
  };

  var returnFilesUrl = function returnFilesUrl(e) {
    try {
      setLoading(true);
      e.preventDefault();
      return Promise.resolve(uploadFiles(files)).then(function (results) {
        var length = results.length;

        var FilesHash = results[length - 1].cid._baseCache.get('z');

        var FilesUrl = 'https://ipfs.infura.io/ipfs/' + FilesHash;
        console.log(FilesUrl);
        setUrl(FilesUrl);
        setFolderUrl(FilesUrl);
        setLoading(false);
        setUploaded(true);
      });
    } catch (e) {
      return Promise.reject(e);
    }
  };

  var filesAndUploadButton = function filesAndUploadButton() {
    if (files.length !== 0) {
      if (!loading) {
        return /*#__PURE__*/React.createElement("div", null, uploaded ? /*#__PURE__*/React.createElement("h5", null, "\u2705", ' ', /*#__PURE__*/React.createElement("a", {
          href: folderUrl,
          target: "_blank",
          rel: "noopener noreferrer"
        }, "Folder"), ' ', "Uploaded Successfully \u2705") : /*#__PURE__*/React.createElement("div", null, /*#__PURE__*/React.createElement(Button, {
          type: "submit",
          className: "mb-3"
        }, "Upload Folder"), /*#__PURE__*/React.createElement(ListGroup, {
          className: "mb-3"
        }, Array.from(files).map(function (file) {
          return /*#__PURE__*/React.createElement(ListGroup.Item, {
            as: "li",
            className: "d-flex justify-content-between align-items-start"
          }, /*#__PURE__*/React.createElement("div", {
            className: "ms-2 me-auto"
          }, file.name), /*#__PURE__*/React.createElement(Badge, {
            pill: true
          }, file.size, " kb"));
        }))));
      } else {
        return /*#__PURE__*/React.createElement(Container, null, /*#__PURE__*/React.createElement("h4", null, "Uploading Folder"), /*#__PURE__*/React.createElement(ProgressBar, {
          animated: true,
          now: 100
        }), /*#__PURE__*/React.createElement("h4", null, "Please Wait ..."));
      }
    }
  };

  return /*#__PURE__*/React.createElement("div", null, /*#__PURE__*/React.createElement(Form, {
    onSubmit: returnFilesUrl
  }, /*#__PURE__*/React.createElement(Form.Control, {
    required: true,
    type: "file",
    webkitdirectory: "true",
    multiple: true,
    onChange: function onChange(e) {
      return setFiles(e.target.files);
    },
    className: "mb-3"
  }), filesAndUploadButton()));
};

var ipfs$3 = create('https://ipfs.infura.io:5001/api/v0');
var ImageUpload = function ImageUpload(_ref) {
  var setUrl = _ref.setUrl;

  var _useState = useState({}),
      image = _useState[0],
      setImage = _useState[1];

  var _useState2 = useState(''),
      imagePreview = _useState2[0],
      setImagePreview = _useState2[1];

  var _useState3 = useState(false),
      loading = _useState3[0],
      setLoading = _useState3[1];

  var _useState4 = useState(false),
      uploaded = _useState4[0],
      setUploaded = _useState4[1];

  var createPreview = function createPreview(e) {
    if (e.target.value !== '') {
      setImage(e.target.files[0]);
      var src = URL.createObjectURL(e.target.files[0]);
      setImagePreview(src);
    } else {
      setImagePreview('');
    }
  };

  var uploadFile = function uploadFile(e) {
    try {
      var _temp3 = function _temp3() {
        setLoading(false);
      };

      setLoading(true);
      e.preventDefault();

      var _temp4 = _catch(function () {
        return Promise.resolve(ipfs$3.add(image)).then(function (added) {
          var url = "https://ipfs.infura.io/ipfs/" + added.path;
          setUrl(url);
          setImagePreview(url);
          setUploaded(true);
        });
      }, function (err) {
        console.log('Error uploading the file : ', err);
      });

      return Promise.resolve(_temp4 && _temp4.then ? _temp4.then(_temp3) : _temp3(_temp4));
    } catch (e) {
      return Promise.reject(e);
    }
  };

  var previewAndUploadButton = function previewAndUploadButton() {
    if (imagePreview !== '') {
      if (!loading) {
        return /*#__PURE__*/React.createElement("div", null, uploaded ? /*#__PURE__*/React.createElement("h5", null, "\u2705", ' ', /*#__PURE__*/React.createElement("a", {
          href: imagePreview,
          target: "_blank",
          rel: "noopener noreferrer"
        }, "Image"), ' ', "Uploaded Successfully \u2705", ' ') : /*#__PURE__*/React.createElement("div", null, /*#__PURE__*/React.createElement(Button, {
          type: "submit",
          className: "mb-3"
        }, "Upload Image"), /*#__PURE__*/React.createElement("br", null), /*#__PURE__*/React.createElement("h5", null, image.name, ' ', /*#__PURE__*/React.createElement(Badge, {
          pill: true
        }, image.size, " kb")), /*#__PURE__*/React.createElement(Image, {
          style: {
            height: '300px'
          },
          className: "mb-3",
          src: imagePreview,
          thumbnail: true
        })));
      } else {
        return /*#__PURE__*/React.createElement(Container, null, /*#__PURE__*/React.createElement("h4", null, "Uploading Image"), /*#__PURE__*/React.createElement(ProgressBar, {
          animated: true,
          now: 100
        }), /*#__PURE__*/React.createElement("h4", null, "Please Wait ..."));
      }
    }
  };

  return /*#__PURE__*/React.createElement("div", null, /*#__PURE__*/React.createElement(Form, {
    onSubmit: uploadFile
  }, /*#__PURE__*/React.createElement(Form.Control, {
    required: true,
    type: "file",
    accept: "image/*",
    onChange: function onChange(e) {
      return createPreview(e);
    },
    className: "mb-3"
  }), previewAndUploadButton()));
};

var ipfs$4 = create('https://ipfs.infura.io:5001/api/v0');
var PdfUpload = function PdfUpload(_ref) {
  var setUrl = _ref.setUrl;

  var _useState = useState({}),
      pdf = _useState[0],
      setPdf = _useState[1];

  var _useState2 = useState(''),
      pdfPreview = _useState2[0],
      setPdfPreview = _useState2[1];

  var _useState3 = useState(false),
      loading = _useState3[0],
      setLoading = _useState3[1];

  var _useState4 = useState(false),
      uploaded = _useState4[0],
      setUploaded = _useState4[1];

  var createPreview = function createPreview(e) {
    if (e.target.value !== '') {
      setPdf(e.target.files[0]);
      var src = URL.createObjectURL(e.target.files[0]);
      setPdfPreview(src);
    } else {
      setPdfPreview('');
    }
  };

  var uploadFile = function uploadFile(e) {
    try {
      var _temp3 = function _temp3() {
        setLoading(false);
      };

      setLoading(true);
      e.preventDefault();

      var _temp4 = _catch(function () {
        return Promise.resolve(ipfs$4.add(pdf)).then(function (added) {
          var url = "https://ipfs.infura.io/ipfs/" + added.path;
          setPdfPreview(url);
          setUrl(url);
          setUploaded(true);
        });
      }, function (err) {
        console.log('Error uploading the file : ', err);
      });

      return Promise.resolve(_temp4 && _temp4.then ? _temp4.then(_temp3) : _temp3(_temp4));
    } catch (e) {
      return Promise.reject(e);
    }
  };

  var previewAndUploadButton = function previewAndUploadButton() {
    if (pdfPreview !== '') {
      if (!loading) {
        return /*#__PURE__*/React.createElement("div", null, uploaded ? /*#__PURE__*/React.createElement("h5", null, "\u2705", ' ', /*#__PURE__*/React.createElement("a", {
          href: pdfPreview,
          s: true,
          target: "_blank",
          rel: "noopener noreferrer"
        }, "PDF"), ' ', "Uploaded Successfully \u2705") : /*#__PURE__*/React.createElement("div", null, /*#__PURE__*/React.createElement(Button, {
          type: "submit",
          className: "mb-3"
        }, "Upload PDF"), /*#__PURE__*/React.createElement("br", null), /*#__PURE__*/React.createElement("h5", null, pdf.name, " ", /*#__PURE__*/React.createElement(Badge, {
          pill: true
        }, pdf.size, " kb")), /*#__PURE__*/React.createElement("embed", {
          width: "75%",
          height: "400px",
          className: "mb-3",
          src: pdfPreview
        })));
      } else {
        return /*#__PURE__*/React.createElement(Container, null, /*#__PURE__*/React.createElement("h4", null, "Uploading PDF"), /*#__PURE__*/React.createElement(ProgressBar, {
          animated: true,
          now: 100
        }), /*#__PURE__*/React.createElement("h4", null, "Please Wait ..."));
      }
    }
  };

  return /*#__PURE__*/React.createElement("div", null, /*#__PURE__*/React.createElement(Form, {
    onSubmit: uploadFile
  }, /*#__PURE__*/React.createElement(Form.Control, {
    required: true,
    type: "file",
    accept: "application/pdf",
    onChange: function onChange(e) {
      return createPreview(e);
    },
    className: "mb-3"
  }), previewAndUploadButton()));
};

var ipfs$5 = create('https://ipfs.infura.io:5001/api/v0');
var TextUpload = function TextUpload(_ref) {
  var setUrl = _ref.setUrl;

  var _useState = useState(''),
      text = _useState[0],
      setText = _useState[1];

  var _useState2 = useState(false),
      loading = _useState2[0],
      setLoading = _useState2[1];

  var _useState3 = useState(false),
      uploaded = _useState3[0],
      setUploaded = _useState3[1];

  var _useState4 = useState(''),
      textUrl = _useState4[0],
      setTextUrl = _useState4[1];

  var uploadText = function uploadText(e) {
    try {
      var _temp3 = function _temp3() {
        setLoading(false);
      };

      setLoading(true);
      e.preventDefault();

      var _temp4 = _catch(function () {
        return Promise.resolve(ipfs$5.add(text)).then(function (added) {
          var url = "https://ipfs.infura.io/ipfs/" + added.path;
          setTextUrl(url);
          setUrl(url);
          setUploaded(true);
        });
      }, function (err) {
        console.log('Error uploading the file : ', err);
      });

      return Promise.resolve(_temp4 && _temp4.then ? _temp4.then(_temp3) : _temp3(_temp4));
    } catch (e) {
      return Promise.reject(e);
    }
  };

  var uploadButtonLoading = function uploadButtonLoading() {
    if (text === '') return;

    if (uploaded) {
      return /*#__PURE__*/React.createElement("h5", null, "\u2705", ' ', /*#__PURE__*/React.createElement("a", {
        href: textUrl,
        target: "_blank",
        rel: "noopener noreferrer"
      }, "Text"), ' ', "Uploaded Successfully \u2705");
    } else {
      if (loading) {
        return /*#__PURE__*/React.createElement(Container, null, /*#__PURE__*/React.createElement("h4", null, "Uploading Text"), /*#__PURE__*/React.createElement(ProgressBar, {
          animated: true,
          now: 100
        }), /*#__PURE__*/React.createElement("h4", null, "Please Wait ..."));
      } else {
        return /*#__PURE__*/React.createElement(Button, {
          type: "submit"
        }, "Upload Text");
      }
    }
  };

  var textForm = function textForm() {
    if (loading || uploaded) {
      return /*#__PURE__*/React.createElement(Form, null, /*#__PURE__*/React.createElement(Form.Group, {
        className: "mb-3"
      }, /*#__PURE__*/React.createElement(Form.Label, null, "Enter the Text :"), /*#__PURE__*/React.createElement(Form.Control, {
        onChange: function onChange(e) {
          return setText(e.target.value);
        },
        readOnly: true,
        as: "textarea",
        rows: 3
      })), uploadButtonLoading());
    } else {
      return /*#__PURE__*/React.createElement(Form, {
        onSubmit: uploadText
      }, /*#__PURE__*/React.createElement(Form.Group, {
        className: "mb-3"
      }, /*#__PURE__*/React.createElement(Form.Label, null, "Enter the Text :"), /*#__PURE__*/React.createElement(Form.Control, {
        onChange: function onChange(e) {
          return setText(e.target.value);
        },
        required: true,
        as: "textarea",
        rows: 3
      })), uploadButtonLoading());
    }
  };

  return /*#__PURE__*/React.createElement("div", null, textForm());
};

export { FileUpload, FolderUpload, ImageUpload, MultipleFilesUpload, PdfUpload, TextUpload };
//# sourceMappingURL=index.modern.js.map
