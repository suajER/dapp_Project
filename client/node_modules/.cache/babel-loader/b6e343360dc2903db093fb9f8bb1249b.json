{"ast":null,"code":"'use strict';\n\nvar _slicedToArray = require(\"D:\\\\test\\\\client\\\\node_modules\\\\@babel\\\\runtime/helpers/slicedToArray\");\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\n\nvar bytes = require('../bytes.js');\n\nvar varint = require('../varint.js');\n\nconst create = (code, digest) => {\n  const size = digest.byteLength;\n  const sizeOffset = varint.encodingLength(code);\n  const digestOffset = sizeOffset + varint.encodingLength(size);\n  const bytes = new Uint8Array(digestOffset + size);\n  varint.encodeTo(code, bytes, 0);\n  varint.encodeTo(size, bytes, sizeOffset);\n  bytes.set(digest, digestOffset);\n  return new Digest(code, size, digest, bytes);\n};\n\nconst decode = multihash => {\n  const bytes$1 = bytes.coerce(multihash);\n\n  const _varint$decode = varint.decode(bytes$1),\n        _varint$decode2 = _slicedToArray(_varint$decode, 2),\n        code = _varint$decode2[0],\n        sizeOffset = _varint$decode2[1];\n\n  const _varint$decode3 = varint.decode(bytes$1.subarray(sizeOffset)),\n        _varint$decode4 = _slicedToArray(_varint$decode3, 2),\n        size = _varint$decode4[0],\n        digestOffset = _varint$decode4[1];\n\n  const digest = bytes$1.subarray(sizeOffset + digestOffset);\n\n  if (digest.byteLength !== size) {\n    throw new Error('Incorrect length');\n  }\n\n  return new Digest(code, size, digest, bytes$1);\n};\n\nconst equals = (a, b) => {\n  if (a === b) {\n    return true;\n  } else {\n    return a.code === b.code && a.size === b.size && bytes.equals(a.bytes, b.bytes);\n  }\n};\n\nclass Digest {\n  constructor(code, size, digest, bytes) {\n    this.code = code;\n    this.size = size;\n    this.digest = digest;\n    this.bytes = bytes;\n  }\n\n}\n\nexports.Digest = Digest;\nexports.create = create;\nexports.decode = decode;\nexports.equals = equals;","map":null,"metadata":{},"sourceType":"script"}