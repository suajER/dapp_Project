{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\n\nconst LOAD_HASHER = codeOrName => Promise.reject(new Error(\"No hasher found for \\\"\".concat(codeOrName, \"\\\"\")));\n\nclass Multihashes {\n  constructor(options) {\n    this._hashersByName = {};\n    this._hashersByCode = {};\n    this._loadHasher = options.loadHasher || LOAD_HASHER;\n\n    for (const hasher of options.hashers) {\n      this.addHasher(hasher);\n    }\n  }\n\n  addHasher(hasher) {\n    if (this._hashersByName[hasher.name] || this._hashersByCode[hasher.code]) {\n      throw new Error(\"Resolver already exists for codec \\\"\".concat(hasher.name, \"\\\"\"));\n    }\n\n    this._hashersByName[hasher.name] = hasher;\n    this._hashersByCode[hasher.code] = hasher;\n  }\n\n  removeHasher(hasher) {\n    delete this._hashersByName[hasher.name];\n    delete this._hashersByCode[hasher.code];\n  }\n\n  async getHasher(code) {\n    const table = typeof code === 'string' ? this._hashersByName : this._hashersByCode;\n\n    if (table[code]) {\n      return table[code];\n    }\n\n    const hasher = await this._loadHasher(code);\n\n    if (table[code] == null) {\n      this.addHasher(hasher);\n    }\n\n    return hasher;\n  }\n\n  listHashers() {\n    return Object.values(this._hashersByName);\n  }\n\n}\n\nexports.Multihashes = Multihashes;","map":null,"metadata":{},"sourceType":"script"}