{"ast":null,"code":"import _slicedToArray from \"D:\\\\test\\\\client\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nimport * as React from 'react';\nimport { useRef } from 'react';\nimport classNames from 'classnames';\nimport BaseOverlay from '@restart/ui/Overlay';\nimport useMergedRefs from '@restart/hooks/useMergedRefs';\nimport useOverlayOffset from './useOverlayOffset';\nimport Fade from './Fade';\nimport safeFindDOMNode from './safeFindDOMNode';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst defaultProps = {\n  transition: Fade,\n  rootClose: false,\n  show: false,\n  placement: 'top'\n};\n\nfunction wrapRefs(props, arrowProps) {\n  const ref = props.ref;\n  const aRef = arrowProps.ref;\n\n  props.ref = ref.__wrapped || (ref.__wrapped = r => ref(safeFindDOMNode(r)));\n\n  arrowProps.ref = aRef.__wrapped || (aRef.__wrapped = r => aRef(safeFindDOMNode(r)));\n}\n\nconst Overlay =\n/*#__PURE__*/\nReact.forwardRef(({\n  children: overlay,\n  transition,\n  popperConfig = {},\n  ...outerProps\n}, outerRef) => {\n  const popperRef = useRef({});\n\n  const _useOverlayOffset = useOverlayOffset(),\n        _useOverlayOffset2 = _slicedToArray(_useOverlayOffset, 2),\n        ref = _useOverlayOffset2[0],\n        modifiers = _useOverlayOffset2[1];\n\n  const mergedRef = useMergedRefs(outerRef, ref);\n  const actualTransition = transition === true ? Fade : transition || undefined;\n  return (\n    /*#__PURE__*/\n    _jsx(BaseOverlay, { ...outerProps,\n      ref: mergedRef,\n      popperConfig: { ...popperConfig,\n        modifiers: modifiers.concat(popperConfig.modifiers || [])\n      },\n      transition: actualTransition,\n      children: (overlayProps, {\n        arrowProps,\n        popper: popperObj,\n        show\n      }) => {\n        var _popperObj$state, _popperObj$state$modi;\n\n        wrapRefs(overlayProps, arrowProps); // Need to get placement from popper object, handling case when overlay is flipped using 'flip' prop\n\n        const updatedPlacement = popperObj == null ? void 0 : popperObj.placement;\n        const popper = Object.assign(popperRef.current, {\n          state: popperObj == null ? void 0 : popperObj.state,\n          scheduleUpdate: popperObj == null ? void 0 : popperObj.update,\n          placement: updatedPlacement,\n          outOfBoundaries: (popperObj == null ? void 0 : (_popperObj$state = popperObj.state) == null ? void 0 : (_popperObj$state$modi = _popperObj$state.modifiersData.hide) == null ? void 0 : _popperObj$state$modi.isReferenceHidden) || false\n        });\n        if (typeof overlay === 'function') return overlay({ ...overlayProps,\n          placement: updatedPlacement,\n          show,\n          ...(!transition && show && {\n            className: 'show'\n          }),\n          popper,\n          arrowProps\n        });\n        return (\n          /*#__PURE__*/\n          React.cloneElement(overlay, { ...overlayProps,\n            placement: updatedPlacement,\n            arrowProps,\n            popper,\n            className: classNames(overlay.props.className, !transition && show && 'show'),\n            style: { ...overlay.props.style,\n              ...overlayProps.style\n            }\n          })\n        );\n      }\n    })\n  );\n});\nOverlay.displayName = 'Overlay';\nOverlay.defaultProps = defaultProps;\nexport default Overlay;","map":null,"metadata":{},"sourceType":"module"}