{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\n\nvar errCode = require('err-code');\n\nvar fromString = require('uint8arrays/from-string');\n\nvar browserStreamToIt = require('browser-readablestream-to-it');\n\nvar blobToIt = require('blob-to-it');\n\nvar itPeekable = require('it-peekable');\n\nvar all = require('it-all');\n\nvar map = require('it-map');\n\nvar utils = require('./utils.js');\n\nfunction _interopDefaultLegacy(e) {\n  return e && typeof e === 'object' && 'default' in e ? e : {\n    'default': e\n  };\n}\n\nvar errCode__default =\n/*#__PURE__*/\n_interopDefaultLegacy(errCode);\n\nvar browserStreamToIt__default =\n/*#__PURE__*/\n_interopDefaultLegacy(browserStreamToIt);\n\nvar blobToIt__default =\n/*#__PURE__*/\n_interopDefaultLegacy(blobToIt);\n\nvar itPeekable__default =\n/*#__PURE__*/\n_interopDefaultLegacy(itPeekable);\n\nvar all__default =\n/*#__PURE__*/\n_interopDefaultLegacy(all);\n\nvar map__default =\n/*#__PURE__*/\n_interopDefaultLegacy(map);\n\nasync function* toAsyncIterable(thing) {\n  yield thing;\n}\n\nasync function normaliseContent(input) {\n  if (utils.isBytes(input)) {\n    return toAsyncIterable(toBytes(input));\n  }\n\n  if (typeof input === 'string' || input instanceof String) {\n    return toAsyncIterable(toBytes(input.toString()));\n  }\n\n  if (utils.isBlob(input)) {\n    return blobToIt__default[\"default\"](input);\n  }\n\n  if (utils.isReadableStream(input)) {\n    input = browserStreamToIt__default[\"default\"](input);\n  }\n\n  if (Symbol.iterator in input || Symbol.asyncIterator in input) {\n    const peekable = itPeekable__default[\"default\"](input);\n\n    const _ref = await peekable.peek(),\n          value = _ref.value,\n          done = _ref.done;\n\n    if (done) {\n      return toAsyncIterable(new Uint8Array(0));\n    }\n\n    peekable.push(value);\n\n    if (Number.isInteger(value)) {\n      return toAsyncIterable(Uint8Array.from((await all__default[\"default\"](peekable))));\n    }\n\n    if (utils.isBytes(value) || typeof value === 'string' || value instanceof String) {\n      return map__default[\"default\"](peekable, toBytes);\n    }\n  }\n\n  throw errCode__default[\"default\"](new Error(\"Unexpected input: \".concat(input)), 'ERR_UNEXPECTED_INPUT');\n}\n\nfunction toBytes(chunk) {\n  if (chunk instanceof Uint8Array) {\n    return chunk;\n  }\n\n  if (ArrayBuffer.isView(chunk)) {\n    return new Uint8Array(chunk.buffer, chunk.byteOffset, chunk.byteLength);\n  }\n\n  if (chunk instanceof ArrayBuffer) {\n    return new Uint8Array(chunk);\n  }\n\n  if (Array.isArray(chunk)) {\n    return Uint8Array.from(chunk);\n  }\n\n  return fromString.fromString(chunk.toString());\n}\n\nexports.normaliseContent = normaliseContent;","map":null,"metadata":{},"sourceType":"script"}