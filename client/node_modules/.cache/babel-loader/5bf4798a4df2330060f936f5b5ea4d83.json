{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\n\nvar decode$1 = require('../decode.js');\n\nvar token = require('../token.js');\n\nvar byteUtils = require('../byte-utils.js');\n\nvar common = require('../common.js');\n\nclass Tokenizer {\n  constructor(data, options = {}) {\n    this.pos = 0;\n    this.data = data;\n    this.options = options;\n    this.modeStack = ['value'];\n    this.lastToken = '';\n  }\n\n  done() {\n    return this.pos >= this.data.length;\n  }\n\n  ch() {\n    return this.data[this.pos];\n  }\n\n  currentMode() {\n    return this.modeStack[this.modeStack.length - 1];\n  }\n\n  skipWhitespace() {\n    let c = this.ch();\n\n    while (c === 32 || c === 9 || c === 13 || c === 10) {\n      c = this.data[++this.pos];\n    }\n  }\n\n  expect(str) {\n    if (this.data.length - this.pos < str.length) {\n      throw new Error(\"\".concat(common.decodeErrPrefix, \" unexpected end of input at position \").concat(this.pos));\n    }\n\n    for (let i = 0; i < str.length; i++) {\n      if (this.data[this.pos++] !== str[i]) {\n        throw new Error(\"\".concat(common.decodeErrPrefix, \" unexpected token at position \").concat(this.pos, \", expected to find '\").concat(String.fromCharCode(...str), \"'\"));\n      }\n    }\n  }\n\n  parseNumber() {\n    const startPos = this.pos;\n    let negative = false;\n    let float = false;\n\n    const swallow = chars => {\n      while (!this.done()) {\n        const ch = this.ch();\n\n        if (chars.includes(ch)) {\n          this.pos++;\n        } else {\n          break;\n        }\n      }\n    };\n\n    if (this.ch() === 45) {\n      negative = true;\n      this.pos++;\n    }\n\n    if (this.ch() === 48) {\n      this.pos++;\n\n      if (this.ch() === 46) {\n        this.pos++;\n        float = true;\n      } else {\n        return new token.Token(token.Type.uint, 0, this.pos - startPos);\n      }\n    }\n\n    swallow([48, 49, 50, 51, 52, 53, 54, 55, 56, 57]);\n\n    if (negative && this.pos === startPos + 1) {\n      throw new Error(\"\".concat(common.decodeErrPrefix, \" unexpected token at position \").concat(this.pos));\n    }\n\n    if (!this.done() && this.ch() === 46) {\n      if (float) {\n        throw new Error(\"\".concat(common.decodeErrPrefix, \" unexpected token at position \").concat(this.pos));\n      }\n\n      float = true;\n      this.pos++;\n      swallow([48, 49, 50, 51, 52, 53, 54, 55, 56, 57]);\n    }\n\n    if (!this.done() && (this.ch() === 101 || this.ch() === 69)) {\n      float = true;\n      this.pos++;\n\n      if (!this.done() && (this.ch() === 43 || this.ch() === 45)) {\n        this.pos++;\n      }\n\n      swallow([48, 49, 50, 51, 52, 53, 54, 55, 56, 57]);\n    }\n\n    const numStr = String.fromCharCode.apply(null, this.data.subarray(startPos, this.pos));\n    const num = parseFloat(numStr);\n\n    if (float) {\n      return new token.Token(token.Type.float, num, this.pos - startPos);\n    }\n\n    if (this.options.allowBigInt !== true || Number.isSafeInteger(num)) {\n      return new token.Token(num >= 0 ? token.Type.uint : token.Type.negint, num, this.pos - startPos);\n    }\n\n    return new token.Token(num >= 0 ? token.Type.uint : token.Type.negint, BigInt(numStr), this.pos - startPos);\n  }\n\n  parseString() {\n    if (this.ch() !== 34) {\n      throw new Error(\"\".concat(common.decodeErrPrefix, \" unexpected character at position \").concat(this.pos, \"; this shouldn't happen\"));\n    }\n\n    this.pos++;\n\n    for (let i = this.pos, l = 0; i < this.data.length && l < 65536; i++, l++) {\n      const ch = this.data[i];\n\n      if (ch === 92 || ch < 32 || ch >= 128) {\n        break;\n      }\n\n      if (ch === 34) {\n        const str = String.fromCharCode.apply(null, this.data.subarray(this.pos, i));\n        this.pos = i + 1;\n        return new token.Token(token.Type.string, str, l);\n      }\n    }\n\n    const startPos = this.pos;\n    const chars = [];\n\n    const readu4 = () => {\n      if (this.pos + 4 >= this.data.length) {\n        throw new Error(\"\".concat(common.decodeErrPrefix, \" unexpected end of unicode escape sequence at position \").concat(this.pos));\n      }\n\n      let u4 = 0;\n\n      for (let i = 0; i < 4; i++) {\n        let ch = this.ch();\n\n        if (ch >= 48 && ch <= 57) {\n          ch -= 48;\n        } else if (ch >= 97 && ch <= 102) {\n          ch = ch - 97 + 10;\n        } else if (ch >= 65 && ch <= 70) {\n          ch = ch - 65 + 10;\n        } else {\n          throw new Error(\"\".concat(common.decodeErrPrefix, \" unexpected unicode escape character at position \").concat(this.pos));\n        }\n\n        u4 = u4 * 16 + ch;\n        this.pos++;\n      }\n\n      return u4;\n    };\n\n    const readUtf8Char = () => {\n      const firstByte = this.ch();\n      let codePoint = null;\n      let bytesPerSequence = firstByte > 239 ? 4 : firstByte > 223 ? 3 : firstByte > 191 ? 2 : 1;\n\n      if (this.pos + bytesPerSequence > this.data.length) {\n        throw new Error(\"\".concat(common.decodeErrPrefix, \" unexpected unicode sequence at position \").concat(this.pos));\n      }\n\n      let secondByte, thirdByte, fourthByte, tempCodePoint;\n\n      switch (bytesPerSequence) {\n        case 1:\n          if (firstByte < 128) {\n            codePoint = firstByte;\n          }\n\n          break;\n\n        case 2:\n          secondByte = this.data[this.pos + 1];\n\n          if ((secondByte & 192) === 128) {\n            tempCodePoint = (firstByte & 31) << 6 | secondByte & 63;\n\n            if (tempCodePoint > 127) {\n              codePoint = tempCodePoint;\n            }\n          }\n\n          break;\n\n        case 3:\n          secondByte = this.data[this.pos + 1];\n          thirdByte = this.data[this.pos + 2];\n\n          if ((secondByte & 192) === 128 && (thirdByte & 192) === 128) {\n            tempCodePoint = (firstByte & 15) << 12 | (secondByte & 63) << 6 | thirdByte & 63;\n\n            if (tempCodePoint > 2047 && (tempCodePoint < 55296 || tempCodePoint > 57343)) {\n              codePoint = tempCodePoint;\n            }\n          }\n\n          break;\n\n        case 4:\n          secondByte = this.data[this.pos + 1];\n          thirdByte = this.data[this.pos + 2];\n          fourthByte = this.data[this.pos + 3];\n\n          if ((secondByte & 192) === 128 && (thirdByte & 192) === 128 && (fourthByte & 192) === 128) {\n            tempCodePoint = (firstByte & 15) << 18 | (secondByte & 63) << 12 | (thirdByte & 63) << 6 | fourthByte & 63;\n\n            if (tempCodePoint > 65535 && tempCodePoint < 1114112) {\n              codePoint = tempCodePoint;\n            }\n          }\n\n      }\n\n      if (codePoint === null) {\n        codePoint = 65533;\n        bytesPerSequence = 1;\n      } else if (codePoint > 65535) {\n        codePoint -= 65536;\n        chars.push(codePoint >>> 10 & 1023 | 55296);\n        codePoint = 56320 | codePoint & 1023;\n      }\n\n      chars.push(codePoint);\n      this.pos += bytesPerSequence;\n    };\n\n    while (!this.done()) {\n      const ch = this.ch();\n      let ch1;\n\n      switch (ch) {\n        case 92:\n          this.pos++;\n\n          if (this.done()) {\n            throw new Error(\"\".concat(common.decodeErrPrefix, \" unexpected string termination at position \").concat(this.pos));\n          }\n\n          ch1 = this.ch();\n          this.pos++;\n\n          switch (ch1) {\n            case 34:\n            case 39:\n            case 92:\n            case 47:\n              chars.push(ch1);\n              break;\n\n            case 98:\n              chars.push(8);\n              break;\n\n            case 116:\n              chars.push(9);\n              break;\n\n            case 110:\n              chars.push(10);\n              break;\n\n            case 102:\n              chars.push(12);\n              break;\n\n            case 114:\n              chars.push(13);\n              break;\n\n            case 117:\n              chars.push(readu4());\n              break;\n\n            default:\n              throw new Error(\"\".concat(common.decodeErrPrefix, \" unexpected string escape character at position \").concat(this.pos));\n          }\n\n          break;\n\n        case 34:\n          this.pos++;\n          return new token.Token(token.Type.string, byteUtils.decodeCodePointsArray(chars), this.pos - startPos);\n\n        default:\n          if (ch < 32) {\n            throw new Error(\"\".concat(common.decodeErrPrefix, \" invalid control character at position \").concat(this.pos));\n          } else if (ch < 128) {\n            chars.push(ch);\n            this.pos++;\n          } else {\n            readUtf8Char();\n          }\n\n      }\n    }\n\n    throw new Error(\"\".concat(common.decodeErrPrefix, \" unexpected end of string at position \").concat(this.pos));\n  }\n\n  parseValue() {\n    switch (this.ch()) {\n      case 123:\n        this.modeStack.push('obj-start');\n        this.pos++;\n        return new token.Token(token.Type.map, Infinity, 1);\n\n      case 91:\n        this.modeStack.push('array-start');\n        this.pos++;\n        return new token.Token(token.Type.array, Infinity, 1);\n\n      case 34:\n        {\n          return this.parseString();\n        }\n\n      case 110:\n        this.expect([110, 117, 108, 108]);\n        return new token.Token(token.Type.null, null, 4);\n\n      case 102:\n        this.expect([102, 97, 108, 115, 101]);\n        return new token.Token(token.Type.false, false, 5);\n\n      case 116:\n        this.expect([116, 114, 117, 101]);\n        return new token.Token(token.Type.true, true, 4);\n\n      case 45:\n      case 48:\n      case 49:\n      case 50:\n      case 51:\n      case 52:\n      case 53:\n      case 54:\n      case 55:\n      case 56:\n      case 57:\n        return this.parseNumber();\n\n      default:\n        throw new Error(\"\".concat(common.decodeErrPrefix, \" unexpected character at position \").concat(this.pos));\n    }\n  }\n\n  next() {\n    this.skipWhitespace();\n\n    switch (this.currentMode()) {\n      case 'value':\n        this.modeStack.pop();\n        return this.parseValue();\n\n      case 'array-value':\n        {\n          this.modeStack.pop();\n\n          if (this.ch() === 93) {\n            this.pos++;\n            this.skipWhitespace();\n            return new token.Token(token.Type.break, undefined, 1);\n          }\n\n          if (this.ch() !== 44) {\n            throw new Error(\"\".concat(common.decodeErrPrefix, \" unexpected character at position \").concat(this.pos, \", was expecting array delimiter but found '\").concat(String.fromCharCode(this.ch()), \"'\"));\n          }\n\n          this.pos++;\n          this.modeStack.push('array-value');\n          this.skipWhitespace();\n          return this.parseValue();\n        }\n\n      case 'array-start':\n        {\n          this.modeStack.pop();\n\n          if (this.ch() === 93) {\n            this.pos++;\n            this.skipWhitespace();\n            return new token.Token(token.Type.break, undefined, 1);\n          }\n\n          this.modeStack.push('array-value');\n          this.skipWhitespace();\n          return this.parseValue();\n        }\n\n      case 'obj-key':\n        if (this.ch() === 125) {\n          this.modeStack.pop();\n          this.pos++;\n          this.skipWhitespace();\n          return new token.Token(token.Type.break, undefined, 1);\n        }\n\n        if (this.ch() !== 44) {\n          throw new Error(\"\".concat(common.decodeErrPrefix, \" unexpected character at position \").concat(this.pos, \", was expecting object delimiter but found '\").concat(String.fromCharCode(this.ch()), \"'\"));\n        }\n\n        this.pos++;\n        this.skipWhitespace();\n\n      case 'obj-start':\n        {\n          this.modeStack.pop();\n\n          if (this.ch() === 125) {\n            this.pos++;\n            this.skipWhitespace();\n            return new token.Token(token.Type.break, undefined, 1);\n          }\n\n          const token$1 = this.parseString();\n          this.skipWhitespace();\n\n          if (this.ch() !== 58) {\n            throw new Error(\"\".concat(common.decodeErrPrefix, \" unexpected character at position \").concat(this.pos, \", was expecting key/value delimiter ':' but found '\").concat(String.fromCharCode(this.ch()), \"'\"));\n          }\n\n          this.pos++;\n          this.modeStack.push('obj-value');\n          return token$1;\n        }\n\n      case 'obj-value':\n        {\n          this.modeStack.pop();\n          this.modeStack.push('obj-key');\n          this.skipWhitespace();\n          return this.parseValue();\n        }\n\n      default:\n        throw new Error(\"\".concat(common.decodeErrPrefix, \" unexpected parse state at position \").concat(this.pos, \"; this shouldn't happen\"));\n    }\n  }\n\n}\n\nfunction decode(data, options) {\n  options = Object.assign({\n    tokenizer: new Tokenizer(data, options)\n  }, options);\n  return decode$1.decode(data, options);\n}\n\nexports.Tokenizer = Tokenizer;\nexports.decode = decode;","map":null,"metadata":{},"sourceType":"script"}