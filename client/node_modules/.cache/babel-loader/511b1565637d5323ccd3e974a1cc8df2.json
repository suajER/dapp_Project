{"ast":null,"code":"'use strict';\n\nconst codec = require('./codec');\n\nconst protocols = require('./protocols-table');\n\nconst varint = require('varint');\n\nconst _require = require('multiformats/cid'),\n      CID = _require.CID;\n\nconst _require2 = require('multiformats/bases/base58'),\n      base58btc = _require2.base58btc;\n\nconst errCode = require('err-code');\n\nconst inspect = Symbol.for('nodejs.util.inspect.custom');\n\nconst _require3 = require('uint8arrays/to-string'),\n      uint8ArrayToString = _require3.toString;\n\nconst _require4 = require('uint8arrays/equals'),\n      uint8ArrayEquals = _require4.equals;\n/**\r\n * @typedef {(addr: Multiaddr) => Promise<string[]>} Resolver\r\n * @typedef {string | Multiaddr | Uint8Array | null} MultiaddrInput\r\n * @typedef {import('./types').MultiaddrObject} MultiaddrObject\r\n * @typedef {import('./types').Protocol} Protocol\r\n */\n\n/** @type {Map<string, Resolver>} */\n\n\nconst resolvers = new Map();\nconst symbol = Symbol.for('@multiformats/js-multiaddr/multiaddr');\n/**\r\n * Creates a [multiaddr](https://github.com/multiformats/multiaddr) from\r\n * a Uint8Array, String or another Multiaddr instance\r\n * public key.\r\n *\r\n */\n\nclass Multiaddr {\n  /**\r\n   * @example\r\n   * ```js\r\n   * new Multiaddr('/ip4/127.0.0.1/tcp/4001')\r\n   * // <Multiaddr 047f000001060fa1 - /ip4/127.0.0.1/tcp/4001>\r\n   * ```\r\n   *\r\n   * @param {MultiaddrInput} [addr] - If String or Uint8Array, needs to adhere to the address format of a [multiaddr](https://github.com/multiformats/multiaddr#string-format)\r\n   */\n  constructor(addr) {\n    // default\n    if (addr == null) {\n      addr = '';\n    } // Define symbol\n\n\n    Object.defineProperty(this, symbol, {\n      value: true\n    });\n\n    if (addr instanceof Uint8Array) {\n      /** @type {Uint8Array} - The raw bytes representing this multiaddress */\n      this.bytes = codec.fromBytes(addr);\n    } else if (typeof addr === 'string') {\n      if (addr.length > 0 && addr.charAt(0) !== '/') {\n        throw new Error(\"multiaddr \\\"\".concat(addr, \"\\\" must start with a \\\"/\\\"\"));\n      }\n\n      this.bytes = codec.fromString(addr);\n    } else if (Multiaddr.isMultiaddr(addr)) {\n      // Multiaddr\n      this.bytes = codec.fromBytes(addr.bytes); // validate + copy buffer\n    } else {\n      throw new Error('addr must be a string, Buffer, or another Multiaddr');\n    }\n  }\n  /**\r\n   * Returns Multiaddr as a String\r\n   *\r\n   * @example\r\n   * ```js\r\n   * new Multiaddr('/ip4/127.0.0.1/tcp/4001').toString()\r\n   * // '/ip4/127.0.0.1/tcp/4001'\r\n   * ```\r\n   */\n\n\n  toString() {\n    return codec.bytesToString(this.bytes);\n  }\n  /**\r\n   * Returns Multiaddr as a JSON encoded object\r\n   *\r\n   * @example\r\n   * ```js\r\n   * JSON.stringify(new Multiaddr('/ip4/127.0.0.1/tcp/4001'))\r\n   * // '/ip4/127.0.0.1/tcp/4001'\r\n   * ```\r\n   */\n\n\n  toJSON() {\n    return this.toString();\n  }\n  /**\r\n   * Returns Multiaddr as a convinient options object to be used with net.createConnection\r\n   *\r\n   * @example\r\n   * ```js\r\n   * new Multiaddr('/ip4/127.0.0.1/tcp/4001').toOptions()\r\n   * // { family: 4, host: '127.0.0.1', transport: 'tcp', port: 4001 }\r\n   * ```\r\n   */\n\n\n  toOptions() {\n    /** @type {MultiaddrObject} */\n    const opts = {};\n    const parsed = this.toString().split('/');\n    opts.family = parsed[1] === 'ip4' ? 4 : 6;\n    opts.host = parsed[2];\n    opts.transport = parsed[3];\n    opts.port = parseInt(parsed[4]);\n    return opts;\n  }\n  /**\r\n   * Returns the protocols the Multiaddr is defined with, as an array of objects, in\r\n   * left-to-right order. Each object contains the protocol code, protocol name,\r\n   * and the size of its address space in bits.\r\n   * [See list of protocols](https://github.com/multiformats/multiaddr/blob/master/protocols.csv)\r\n   *\r\n   * @example\r\n   * ```js\r\n   * new Multiaddr('/ip4/127.0.0.1/tcp/4001').protos()\r\n   * // [ { code: 4, size: 32, name: 'ip4' },\r\n   * //   { code: 6, size: 16, name: 'tcp' } ]\r\n   * ```\r\n   *\r\n   * @returns {Protocol[]} protocols - All the protocols the address is composed of\r\n   */\n\n\n  protos() {\n    return this.protoCodes().map(code => Object.assign({}, protocols(code)));\n  }\n  /**\r\n   * Returns the codes of the protocols in left-to-right order.\r\n   * [See list of protocols](https://github.com/multiformats/multiaddr/blob/master/protocols.csv)\r\n   *\r\n   * @example\r\n   * ```js\r\n   * Multiaddr('/ip4/127.0.0.1/tcp/4001').protoCodes()\r\n   * // [ 4, 6 ]\r\n   * ```\r\n   *\r\n   * @returns {number[]} protocol codes\r\n   */\n\n\n  protoCodes() {\n    const codes = [];\n    const buf = this.bytes;\n    let i = 0;\n\n    while (i < buf.length) {\n      const code = varint.decode(buf, i);\n      const n = varint.decode.bytes;\n      const p = protocols(code);\n      const size = codec.sizeForAddr(p, buf.slice(i + n));\n      i += size + n;\n      codes.push(code);\n    }\n\n    return codes;\n  }\n  /**\r\n   * Returns the names of the protocols in left-to-right order.\r\n   * [See list of protocols](https://github.com/multiformats/multiaddr/blob/master/protocols.csv)\r\n   *\r\n   * @example\r\n   * ```js\r\n   * new Multiaddr('/ip4/127.0.0.1/tcp/4001').protoNames()\r\n   * // [ 'ip4', 'tcp' ]\r\n   * ```\r\n   *\r\n   * @returns {string[]} protocol names\r\n   */\n\n\n  protoNames() {\n    return this.protos().map(proto => proto.name);\n  }\n  /**\r\n   * Returns a tuple of parts\r\n   *\r\n   * @example\r\n   * ```js\r\n   * new Multiaddr(\"/ip4/127.0.0.1/tcp/4001\").tuples()\r\n   * // [ [ 4, <Buffer 7f 00 00 01> ], [ 6, <Buffer 0f a1> ] ]\r\n   * ```\r\n   */\n\n\n  tuples() {\n    return codec.bytesToTuples(this.bytes);\n  }\n  /**\r\n   * Returns a tuple of string/number parts\r\n   * - tuples[][0] = code of protocol\r\n   * - tuples[][1] = contents of address\r\n   *\r\n   * @example\r\n   * ```js\r\n   * new Multiaddr(\"/ip4/127.0.0.1/tcp/4001\").stringTuples()\r\n   * // [ [ 4, '127.0.0.1' ], [ 6, '4001' ] ]\r\n   * ```\r\n   */\n\n\n  stringTuples() {\n    const t = codec.bytesToTuples(this.bytes);\n    return codec.tuplesToStringTuples(t);\n  }\n  /**\r\n   * Encapsulates a Multiaddr in another Multiaddr\r\n   *\r\n   * @example\r\n   * ```js\r\n   * const mh1 = new Multiaddr('/ip4/8.8.8.8/tcp/1080')\r\n   * // <Multiaddr 0408080808060438 - /ip4/8.8.8.8/tcp/1080>\r\n   *\r\n   * const mh2 = new Multiaddr('/ip4/127.0.0.1/tcp/4001')\r\n   * // <Multiaddr 047f000001060fa1 - /ip4/127.0.0.1/tcp/4001>\r\n   *\r\n   * const mh3 = mh1.encapsulate(mh2)\r\n   * // <Multiaddr 0408080808060438047f000001060fa1 - /ip4/8.8.8.8/tcp/1080/ip4/127.0.0.1/tcp/4001>\r\n   *\r\n   * mh3.toString()\r\n   * // '/ip4/8.8.8.8/tcp/1080/ip4/127.0.0.1/tcp/4001'\r\n   * ```\r\n   *\r\n   * @param {MultiaddrInput} addr - Multiaddr to add into this Multiaddr\r\n   */\n\n\n  encapsulate(addr) {\n    addr = new Multiaddr(addr);\n    return new Multiaddr(this.toString() + addr.toString());\n  }\n  /**\r\n   * Decapsulates a Multiaddr from another Multiaddr\r\n   *\r\n   * @example\r\n   * ```js\r\n   * const mh1 = new Multiaddr('/ip4/8.8.8.8/tcp/1080')\r\n   * // <Multiaddr 0408080808060438 - /ip4/8.8.8.8/tcp/1080>\r\n   *\r\n   * const mh2 = new Multiaddr('/ip4/127.0.0.1/tcp/4001')\r\n   * // <Multiaddr 047f000001060fa1 - /ip4/127.0.0.1/tcp/4001>\r\n   *\r\n   * const mh3 = mh1.encapsulate(mh2)\r\n   * // <Multiaddr 0408080808060438047f000001060fa1 - /ip4/8.8.8.8/tcp/1080/ip4/127.0.0.1/tcp/4001>\r\n   *\r\n   * mh3.decapsulate(mh2).toString()\r\n   * // '/ip4/8.8.8.8/tcp/1080'\r\n   * ```\r\n   *\r\n   * @param {Multiaddr | string} addr - Multiaddr to remove from this Multiaddr\r\n   * @returns {Multiaddr}\r\n   */\n\n\n  decapsulate(addr) {\n    const addrString = addr.toString();\n    const s = this.toString();\n    const i = s.lastIndexOf(addrString);\n\n    if (i < 0) {\n      throw new Error('Address ' + this + ' does not contain subaddress: ' + addr);\n    }\n\n    return new Multiaddr(s.slice(0, i));\n  }\n  /**\r\n   * A more reliable version of `decapsulate` if you are targeting a\r\n   * specific code, such as 421 (the `p2p` protocol code). The last index of the code\r\n   * will be removed from the `Multiaddr`, and a new instance will be returned.\r\n   * If the code is not present, the original `Multiaddr` is returned.\r\n   *\r\n   * @example\r\n   * ```js\r\n   * const addr = new Multiaddr('/ip4/0.0.0.0/tcp/8080/p2p/QmcgpsyWgH8Y8ajJz1Cu72KnS5uo2Aa2LpzU7kinSupNKC')\r\n   * // <Multiaddr 0400... - /ip4/0.0.0.0/tcp/8080/p2p/QmcgpsyWgH8Y8ajJz1Cu72KnS5uo2Aa2LpzU7kinSupNKC>\r\n   *\r\n   * addr.decapsulateCode(421).toString()\r\n   * // '/ip4/0.0.0.0/tcp/8080'\r\n   *\r\n   * new Multiaddr('/ip4/127.0.0.1/tcp/8080').decapsulateCode(421).toString()\r\n   * // '/ip4/127.0.0.1/tcp/8080'\r\n   * ```\r\n   *\r\n   * @param {number} code - The code of the protocol to decapsulate from this Multiaddr\r\n   * @returns {Multiaddr}\r\n   */\n\n\n  decapsulateCode(code) {\n    const tuples = this.tuples();\n\n    for (let i = tuples.length - 1; i >= 0; i--) {\n      if (tuples[i][0] === code) {\n        return new Multiaddr(codec.tuplesToBytes(tuples.slice(0, i)));\n      }\n    }\n\n    return this;\n  }\n  /**\r\n   * Extract the peerId if the multiaddr contains one\r\n   *\r\n   * @example\r\n   * ```js\r\n   * const mh1 = new Multiaddr('/ip4/8.8.8.8/tcp/1080/ipfs/QmValidBase58string')\r\n   * // <Multiaddr 0408080808060438 - /ip4/8.8.8.8/tcp/1080/ipfs/QmValidBase58string>\r\n   *\r\n   * // should return QmValidBase58string or null if the id is missing or invalid\r\n   * const peerId = mh1.getPeerId()\r\n   * ```\r\n   *\r\n   * @returns {string | null} peerId - The id of the peer or null if invalid or missing from the ma\r\n   */\n\n\n  getPeerId() {\n    try {\n      const tuples = this.stringTuples().filter(tuple => {\n        if (tuple[0] === protocols.names.ipfs.code) {\n          return true;\n        }\n\n        return false;\n      }); // Get the last ipfs tuple ['ipfs', 'peerid string']\n\n      const tuple = tuples.pop();\n\n      if (tuple && tuple[1]) {\n        const peerIdStr = tuple[1]; // peer id is base58btc encoded string but not multibase encoded so add the `z`\n        // prefix so we can validate that it is correctly encoded\n\n        if (peerIdStr[0] === 'Q' || peerIdStr[0] === '1') {\n          return uint8ArrayToString(base58btc.decode(\"z\".concat(peerIdStr)), 'base58btc');\n        } // try to parse peer id as CID\n\n\n        return uint8ArrayToString(CID.parse(peerIdStr).multihash.bytes, 'base58btc');\n      }\n\n      return null;\n    } catch (e) {\n      return null;\n    }\n  }\n  /**\r\n   * Extract the path if the multiaddr contains one\r\n   *\r\n   * @example\r\n   * ```js\r\n   * const mh1 = new Multiaddr('/ip4/8.8.8.8/tcp/1080/unix/tmp/p2p.sock')\r\n   * // <Multiaddr 0408080808060438 - /ip4/8.8.8.8/tcp/1080/unix/tmp/p2p.sock>\r\n   *\r\n   * // should return utf8 string or null if the id is missing or invalid\r\n   * const path = mh1.getPath()\r\n   * ```js\r\n   *\r\n   * @returns {string | null} path - The path of the multiaddr, or null if no path protocol is present\r\n   */\n\n\n  getPath() {\n    let path = null;\n\n    try {\n      path = this.stringTuples().filter(tuple => {\n        const proto = protocols(tuple[0]);\n\n        if (proto.path) {\n          return true;\n        }\n\n        return false;\n      })[0][1];\n\n      if (!path) {\n        path = null;\n      }\n    } catch (e) {\n      path = null;\n    }\n\n    return path;\n  }\n  /**\r\n   * Checks if two Multiaddrs are the same\r\n   *\r\n   * @example\r\n   * ```js\r\n   * const mh1 = new Multiaddr('/ip4/8.8.8.8/tcp/1080')\r\n   * // <Multiaddr 0408080808060438 - /ip4/8.8.8.8/tcp/1080>\r\n   *\r\n   * const mh2 = new Multiaddr('/ip4/127.0.0.1/tcp/4001')\r\n   * // <Multiaddr 047f000001060fa1 - /ip4/127.0.0.1/tcp/4001>\r\n   *\r\n   * mh1.equals(mh1)\r\n   * // true\r\n   *\r\n   * mh1.equals(mh2)\r\n   * // false\r\n   * ```\r\n   *\r\n   * @param {Multiaddr} addr\r\n   * @returns {boolean}\r\n   */\n\n\n  equals(addr) {\n    return uint8ArrayEquals(this.bytes, addr.bytes);\n  }\n  /**\r\n   * Resolve multiaddr if containing resolvable hostname.\r\n   *\r\n   * @example\r\n   * ```js\r\n   * Multiaddr.resolvers.set('dnsaddr', resolverFunction)\r\n   * const mh1 = new Multiaddr('/dnsaddr/bootstrap.libp2p.io/p2p/QmbLHAnMoJPWSCR5Zhtx6BHJX9KiKNN6tpvbUcqanj75Nb')\r\n   * const resolvedMultiaddrs = await mh1.resolve()\r\n   * // [\r\n   * //   <Multiaddr 04934b5353060fa1a503221220c10f9319dac35c270a6b74cd644cb3acfc1f6efc8c821f8eb282599fd1814f64 - /ip4/147.75.83.83/tcp/4001/p2p/QmbLHAnMoJPWSCR5Zhtx6BHJX9KiKNN6tpvbUcqanj75Nb>,\r\n   * //   <Multiaddr 04934b53530601bbde03a503221220c10f9319dac35c270a6b74cd644cb3acfc1f6efc8c821f8eb282599fd1814f64 - /ip4/147.75.83.83/tcp/443/wss/p2p/QmbLHAnMoJPWSCR5Zhtx6BHJX9KiKNN6tpvbUcqanj75Nb>,\r\n   * //   <Multiaddr 04934b535391020fa1cc03a503221220c10f9319dac35c270a6b74cd644cb3acfc1f6efc8c821f8eb282599fd1814f64 - /ip4/147.75.83.83/udp/4001/quic/p2p/QmbLHAnMoJPWSCR5Zhtx6BHJX9KiKNN6tpvbUcqanj75Nb>\r\n   * // ]\r\n   * ```\r\n   *\r\n   * @returns {Promise<Array<Multiaddr>>}\r\n   */\n\n\n  async resolve() {\n    const resolvableProto = this.protos().find(p => p.resolvable); // Multiaddr is not resolvable?\n\n    if (!resolvableProto) {\n      return [this];\n    }\n\n    const resolver = resolvers.get(resolvableProto.name);\n\n    if (!resolver) {\n      throw errCode(new Error(\"no available resolver for \".concat(resolvableProto.name)), 'ERR_NO_AVAILABLE_RESOLVER');\n    }\n\n    const addresses = await resolver(this);\n    return addresses.map(a => new Multiaddr(a));\n  }\n  /**\r\n   * Gets a Multiaddrs node-friendly address object. Note that protocol information\r\n   * is left out: in Node (and most network systems) the protocol is unknowable\r\n   * given only the address.\r\n   *\r\n   * Has to be a ThinWaist Address, otherwise throws error\r\n   *\r\n   * @example\r\n   * ```js\r\n   * new Multiaddr('/ip4/127.0.0.1/tcp/4001').nodeAddress()\r\n   * // {family: 4, address: '127.0.0.1', port: 4001}\r\n   * ```\r\n   *\r\n   * @returns {{family: 4 | 6, address: string, port: number}}\r\n   * @throws {Error} Throws error if Multiaddr is not a Thin Waist address\r\n   */\n\n\n  nodeAddress() {\n    const codes = this.protoCodes();\n    const names = this.protoNames();\n    const parts = this.toString().split('/').slice(1);\n\n    if (parts.length < 4) {\n      throw new Error('multiaddr must have a valid format: \"/{ip4, ip6, dns4, dns6}/{address}/{tcp, udp}/{port}\".');\n    } else if (codes[0] !== 4 && codes[0] !== 41 && codes[0] !== 54 && codes[0] !== 55) {\n      throw new Error(\"no protocol with name: \\\"'\".concat(names[0], \"'\\\". Must have a valid family name: \\\"{ip4, ip6, dns4, dns6}\\\".\"));\n    } else if (parts[2] !== 'tcp' && parts[2] !== 'udp') {\n      throw new Error(\"no protocol with name: \\\"'\".concat(names[1], \"'\\\". Must have a valid transport protocol: \\\"{tcp, udp}\\\".\"));\n    }\n\n    return {\n      family: codes[0] === 41 || codes[0] === 55 ? 6 : 4,\n      address: parts[1],\n      port: parseInt(parts[3]) // tcp or udp port\n\n    };\n  }\n  /**\r\n   * Returns if a Multiaddr is a Thin Waist address or not.\r\n   *\r\n   * Thin Waist is if a Multiaddr adheres to the standard combination of:\r\n   *\r\n   * `{IPv4, IPv6}/{TCP, UDP}`\r\n   *\r\n   * @example\r\n   * ```js\r\n   * const mh1 = new Multiaddr('/ip4/127.0.0.1/tcp/4001')\r\n   * // <Multiaddr 047f000001060fa1 - /ip4/127.0.0.1/tcp/4001>\r\n   * const mh2 = new Multiaddr('/ip4/192.168.2.1/tcp/5001')\r\n   * // <Multiaddr 04c0a80201061389 - /ip4/192.168.2.1/tcp/5001>\r\n   * const mh3 = mh1.encapsulate(mh2)\r\n   * // <Multiaddr 047f000001060fa104c0a80201061389 - /ip4/127.0.0.1/tcp/4001/ip4/192.168.2.1/tcp/5001>\r\n   * const mh4 = new Multiaddr('/ip4/127.0.0.1/tcp/2000/wss/p2p-webrtc-star/p2p/QmcgpsyWgH8Y8ajJz1Cu72KnS5uo2Aa2LpzU7kinSooo2a')\r\n   * // <Multiaddr 047f0000010607d0de039302a503221220d52ebb89d85b02a284948203a62ff28389c57c9f42beec4ec20db76a64835843 - /ip4/127.0.0.1/tcp/2000/wss/p2p-webrtc-star/p2p/QmcgpsyWgH8Y8ajJz1Cu72KnS5uo2Aa2LpzU7kinSooo2a>\r\n   * mh1.isThinWaistAddress()\r\n   * // true\r\n   * mh2.isThinWaistAddress()\r\n   * // true\r\n   * mh3.isThinWaistAddress()\r\n   * // false\r\n   * mh4.isThinWaistAddress()\r\n   * // false\r\n   * ```\r\n   *\r\n   * @param {Multiaddr} [addr] - Defaults to using `this` instance\r\n   */\n\n\n  isThinWaistAddress(addr) {\n    const protos = (addr || this).protos();\n\n    if (protos.length !== 2) {\n      return false;\n    }\n\n    if (protos[0].code !== 4 && protos[0].code !== 41) {\n      return false;\n    }\n\n    if (protos[1].code !== 6 && protos[1].code !== 273) {\n      return false;\n    }\n\n    return true;\n  }\n  /**\r\n   * Creates a Multiaddr from a node-friendly address object\r\n   *\r\n   * @example\r\n   * ```js\r\n   * Multiaddr.fromNodeAddress({address: '127.0.0.1', port: '4001'}, 'tcp')\r\n   * // <Multiaddr 047f000001060fa1 - /ip4/127.0.0.1/tcp/4001>\r\n   * ```\r\n   *\r\n   * @param {{family: 4 | 6, address: string, port: number}} addr\r\n   * @param {string} transport\r\n   */\n\n\n  static fromNodeAddress(addr, transport) {\n    if (!addr) {\n      throw new Error('requires node address object');\n    }\n\n    if (!transport) {\n      throw new Error('requires transport protocol');\n    }\n\n    let ip;\n\n    switch (addr.family) {\n      case 4:\n        ip = 'ip4';\n        break;\n\n      case 6:\n        ip = 'ip6';\n        break;\n\n      default:\n        throw Error(\"Invalid addr family. Got '\".concat(addr.family, \"' instead of 4 or 6\"));\n    }\n\n    return new Multiaddr('/' + [ip, addr.address, transport, addr.port].join('/'));\n  }\n  /**\r\n   * Returns if something is a Multiaddr that is a name\r\n   *\r\n   * @param {Multiaddr} addr\r\n   * @returns {boolean} isName\r\n   */\n\n\n  static isName(addr) {\n    if (!Multiaddr.isMultiaddr(addr)) {\n      return false;\n    } // if a part of the multiaddr is resolvable, then return true\n\n\n    return addr.protos().some(proto => proto.resolvable);\n  }\n  /**\r\n   * Check if object is a CID instance\r\n   *\r\n   * @param {any} value\r\n   * @returns {value is Multiaddr}\r\n   */\n\n\n  static isMultiaddr(value) {\n    return value instanceof Multiaddr || Boolean(value && value[symbol]);\n  }\n  /**\r\n   * Returns Multiaddr as a human-readable string.\r\n   * For post Node.js v10.0.0.\r\n   * https://nodejs.org/api/deprecations.html#deprecations_dep0079_custom_inspection_function_on_objects_via_inspect\r\n   *\r\n   * @example\r\n   * ```js\r\n   * console.log(new Multiaddr('/ip4/127.0.0.1/tcp/4001'))\r\n   * // '<Multiaddr 047f000001060fa1 - /ip4/127.0.0.1/tcp/4001>'\r\n   * ```\r\n   *\r\n   * @returns {string}\r\n   */\n\n\n  [inspect]() {\n    return '<Multiaddr ' + uint8ArrayToString(this.bytes, 'base16') + ' - ' + codec.bytesToString(this.bytes) + '>';\n  }\n  /**\r\n   * Returns Multiaddr as a human-readable string.\r\n   * Fallback for pre Node.js v10.0.0.\r\n   * https://nodejs.org/api/deprecations.html#deprecations_dep0079_custom_inspection_function_on_objects_via_inspect\r\n   *\r\n   * @example\r\n   * ```js\r\n   * new Multiaddr('/ip4/127.0.0.1/tcp/4001').inspect()\r\n   * // '<Multiaddr 047f000001060fa1 - /ip4/127.0.0.1/tcp/4001>'\r\n   * ```\r\n   *\r\n   * @returns {string}\r\n   */\n\n\n  inspect() {\n    return '<Multiaddr ' + uint8ArrayToString(this.bytes, 'base16') + ' - ' + codec.bytesToString(this.bytes) + '>';\n  }\n\n}\n/**\r\n * Object containing table, names and codes of all supported protocols.\r\n * To get the protocol values from a Multiaddr, you can use\r\n * [`.protos()`](#multiaddrprotos),\r\n * [`.protoCodes()`](#multiaddrprotocodes) or\r\n * [`.protoNames()`](#multiaddrprotonames)\r\n *\r\n * @returns {{table: Array, names: Object, codes: Object}}\r\n */\n\n\nMultiaddr.protocols = protocols;\nMultiaddr.resolvers = resolvers;\n/**\r\n * Static factory\r\n *\r\n * @param {MultiaddrInput} addr\r\n */\n\nfunction multiaddr(addr) {\n  return new Multiaddr(addr);\n}\n\nmodule.exports = {\n  Multiaddr,\n  multiaddr,\n  protocols,\n  resolvers\n};","map":null,"metadata":{},"sourceType":"script"}