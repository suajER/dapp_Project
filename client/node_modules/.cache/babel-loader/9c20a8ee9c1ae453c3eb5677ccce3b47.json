{"ast":null,"code":"'use strict';\n\nvar _slicedToArray = require(\"C:\\\\Users\\\\DELL\\\\Desktop\\\\CS-dapp\\\\client\\\\node_modules\\\\@babel\\\\runtime/helpers/slicedToArray\");\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\n\nvar multiaddr = require('multiaddr');\n\nvar env_js = require('ipfs-utils/src/env.js');\n\nvar parseDuration = require('parse-duration');\n\nvar debug = require('debug');\n\nvar HTTP = require('ipfs-utils/src/http.js');\n\nvar mergeOpts = require('merge-options');\n\nvar toUrlString = require('ipfs-core-utils/to-url-string');\n\nvar getAgent = require('ipfs-core-utils/agent');\n\nfunction _interopDefaultLegacy(e) {\n  return e && typeof e === 'object' && 'default' in e ? e : {\n    'default': e\n  };\n}\n\nvar parseDuration__default =\n/*#__PURE__*/\n_interopDefaultLegacy(parseDuration);\n\nvar debug__default =\n/*#__PURE__*/\n_interopDefaultLegacy(debug);\n\nvar HTTP__default =\n/*#__PURE__*/\n_interopDefaultLegacy(HTTP);\n\nvar mergeOpts__default =\n/*#__PURE__*/\n_interopDefaultLegacy(mergeOpts);\n\nvar getAgent__default =\n/*#__PURE__*/\n_interopDefaultLegacy(getAgent);\n\nconst log = debug__default[\"default\"]('ipfs-http-client:lib:error-handler');\nconst merge = mergeOpts__default[\"default\"].bind({\n  ignoreUndefined: true\n});\nconst DEFAULT_PROTOCOL = env_js.isBrowser || env_js.isWebWorker ? location.protocol : 'http';\nconst DEFAULT_HOST = env_js.isBrowser || env_js.isWebWorker ? location.hostname : 'localhost';\nconst DEFAULT_PORT = env_js.isBrowser || env_js.isWebWorker ? location.port : '5001';\n\nconst normalizeOptions = (options = {}) => {\n  let url;\n  let opts = {};\n  let agent;\n\n  if (typeof options === 'string' || multiaddr.Multiaddr.isMultiaddr(options)) {\n    url = new URL(toUrlString.toUrlString(options));\n  } else if (options instanceof URL) {\n    url = options;\n  } else if (typeof options.url === 'string' || multiaddr.Multiaddr.isMultiaddr(options.url)) {\n    url = new URL(toUrlString.toUrlString(options.url));\n    opts = options;\n  } else if (options.url instanceof URL) {\n    url = options.url;\n    opts = options;\n  } else {\n    opts = options || {};\n    const protocol = (opts.protocol || DEFAULT_PROTOCOL).replace(':', '');\n    const host = (opts.host || DEFAULT_HOST).split(':')[0];\n    const port = opts.port || DEFAULT_PORT;\n    url = new URL(\"\".concat(protocol, \"://\").concat(host, \":\").concat(port));\n  }\n\n  if (opts.apiPath) {\n    url.pathname = opts.apiPath;\n  } else if (url.pathname === '/' || url.pathname === undefined) {\n    url.pathname = 'api/v0';\n  }\n\n  if (env_js.isNode) {\n    const Agent = getAgent__default[\"default\"](url);\n    agent = opts.agent || new Agent({\n      keepAlive: true,\n      maxSockets: 6\n    });\n  }\n\n  return { ...opts,\n    host: url.host,\n    protocol: url.protocol.replace(':', ''),\n    port: Number(url.port),\n    apiPath: url.pathname,\n    url,\n    agent\n  };\n};\n\nconst errorHandler = async response => {\n  let msg;\n\n  try {\n    if ((response.headers.get('Content-Type') || '').startsWith('application/json')) {\n      const data = await response.json();\n      log(data);\n      msg = data.Message || data.message;\n    } else {\n      msg = await response.text();\n    }\n  } catch (err) {\n    log('Failed to parse error response', err);\n    msg = err.message;\n  }\n\n  let error = new HTTP__default[\"default\"].HTTPError(response);\n\n  if (msg) {\n    if (msg.includes('deadline has elapsed')) {\n      error = new HTTP__default[\"default\"].TimeoutError();\n    }\n\n    if (msg && msg.includes('context deadline exceeded')) {\n      error = new HTTP__default[\"default\"].TimeoutError();\n    }\n  }\n\n  if (msg && msg.includes('request timed out')) {\n    error = new HTTP__default[\"default\"].TimeoutError();\n  }\n\n  if (msg) {\n    error.message = msg;\n  }\n\n  throw error;\n};\n\nconst KEBAB_REGEX = /[A-Z\\u00C0-\\u00D6\\u00D8-\\u00DE]/g;\n\nconst kebabCase = str => {\n  return str.replace(KEBAB_REGEX, function (match) {\n    return '-' + match.toLowerCase();\n  });\n};\n\nconst parseTimeout = value => {\n  return typeof value === 'string' ? parseDuration__default[\"default\"](value) : value;\n};\n\nclass Client extends HTTP__default[\"default\"] {\n  constructor(options = {}) {\n    const opts = normalizeOptions(options);\n    super({\n      timeout: parseTimeout(opts.timeout || 0) || undefined,\n      headers: opts.headers,\n      base: \"\".concat(opts.url),\n      handleError: errorHandler,\n      transformSearchParams: search => {\n        const out = new URLSearchParams();\n\n        for (const _ref of search) {\n          var _ref2 = _slicedToArray(_ref, 2);\n\n          const key = _ref2[0];\n          const value = _ref2[1];\n\n          if (value !== 'undefined' && value !== 'null' && key !== 'signal') {\n            out.append(kebabCase(key), value);\n          }\n\n          if (key === 'timeout' && !isNaN(value)) {\n            out.append(kebabCase(key), value);\n          }\n        }\n\n        return out;\n      },\n      agent: opts.agent\n    });\n    delete this.get;\n    delete this.put;\n    delete this.delete;\n    delete this.options;\n    const fetch = this.fetch;\n\n    this.fetch = (resource, options = {}) => {\n      if (typeof resource === 'string' && !resource.startsWith('/')) {\n        resource = \"\".concat(opts.url, \"/\").concat(resource);\n      }\n\n      return fetch.call(this, resource, merge(options, {\n        method: 'POST'\n      }));\n    };\n  }\n\n}\n\nconst HTTPError = HTTP__default[\"default\"].HTTPError;\nexports.Client = Client;\nexports.HTTPError = HTTPError;\nexports.errorHandler = errorHandler;","map":null,"metadata":{},"sourceType":"script"}