{"ast":null,"code":"import _slicedToArray from \"D:\\\\test\\\\client\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nimport { useContext, useCallback } from 'react';\nimport * as React from 'react';\nimport { useSSRSafeId } from './ssr';\nimport DropdownContext from './DropdownContext';\nimport { Fragment as _Fragment } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport const isRoleMenu = el => {\n  var _el$getAttribute;\n\n  return ((_el$getAttribute = el.getAttribute('role')) == null ? void 0 : _el$getAttribute.toLowerCase()) === 'menu';\n};\n\nconst noop = () => {};\n/**\n * Wires up Dropdown toggle functionality, returning a set a props to attach\n * to the element that functions as the dropdown toggle (generally a button).\n *\n * @memberOf Dropdown\n */\n\n\nexport function useDropdownToggle() {\n  const id = useSSRSafeId();\n\n  const _ref = useContext(DropdownContext) || {},\n        _ref$show = _ref.show,\n        show = _ref$show === void 0 ? false : _ref$show,\n        _ref$toggle = _ref.toggle,\n        toggle = _ref$toggle === void 0 ? noop : _ref$toggle,\n        setToggle = _ref.setToggle,\n        menuElement = _ref.menuElement;\n\n  const handleClick = useCallback(e => {\n    toggle(!show, e);\n  }, [show, toggle]);\n  const props = {\n    id,\n    ref: setToggle || noop,\n    onClick: handleClick,\n    'aria-expanded': !!show\n  }; // This is maybe better down in an effect, but\n  // the component is going to update anyway when the menu element\n  // is set so might return new props.\n\n  if (menuElement && isRoleMenu(menuElement)) {\n    props['aria-haspopup'] = true;\n  }\n\n  return [props, {\n    show,\n    toggle\n  }];\n}\n/**\n * Also exported as `<Dropdown.Toggle>` from `Dropdown`.\n *\n * @displayName DropdownToggle\n * @memberOf Dropdown\n */\n\nfunction DropdownToggle({\n  children\n}) {\n  const _useDropdownToggle = useDropdownToggle(),\n        _useDropdownToggle2 = _slicedToArray(_useDropdownToggle, 2),\n        props = _useDropdownToggle2[0],\n        meta = _useDropdownToggle2[1];\n\n  return (\n    /*#__PURE__*/\n    _jsx(_Fragment, {\n      children: children(props, meta)\n    })\n  );\n}\n\nDropdownToggle.displayName = 'DropdownToggle';\n/** @component */\n\nexport default DropdownToggle;","map":null,"metadata":{},"sourceType":"module"}