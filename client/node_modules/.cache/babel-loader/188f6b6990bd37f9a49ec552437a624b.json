{"ast":null,"code":"'use strict';\n/**\r\n * @template T\r\n * @typedef {Object} Peek\r\n * @property {() => IteratorResult<T, void>} peek\r\n */\n\n/**\r\n * @template T\r\n * @typedef {Object} AsyncPeek\r\n * @property {() => Promise<IteratorResult<T, void>>} peek\r\n */\n\n/**\r\n * @template T\r\n * @typedef {Object} Push\r\n * @property {(value:T) => void} push\r\n */\n\n/**\r\n * @template T\r\n * @typedef {Iterable<T> & Peek<T> & Push<T> & Iterator<T>} Peekable<T>\r\n */\n\n/**\r\n * @template T\r\n * @typedef {AsyncIterable<T> & AsyncPeek<T> & Push<T> & AsyncIterator<T>} AsyncPeekable<T>\r\n */\n\n/**\r\n * @template {Iterable<any> | AsyncIterable<any>} I\r\n * @param {I} iterable\r\n * @returns {I extends Iterable<infer T>\r\n *  ? Peekable<T>\r\n *  : I extends AsyncIterable<infer T>\r\n *  ? AsyncPeekable<T>\r\n *  : never\r\n * }\r\n */\n\nvar _slicedToArray = require(\"C:\\\\Users\\\\DELL\\\\Desktop\\\\CS-dapp\\\\client\\\\node_modules\\\\@babel\\\\runtime/helpers/slicedToArray\");\n\nfunction peekableIterator(iterable) {\n  // @ts-ignore\n  const _ref = iterable[Symbol.asyncIterator] // @ts-ignore\n  ? [iterable[Symbol.asyncIterator](), Symbol.asyncIterator] // @ts-ignore\n  : [iterable[Symbol.iterator](), Symbol.iterator],\n        _ref2 = _slicedToArray(_ref, 2),\n        iterator = _ref2[0],\n        symbol = _ref2[1];\n  /** @type {any[]} */\n\n\n  const queue = []; // @ts-ignore\n\n  return {\n    peek: () => {\n      return iterator.next();\n    },\n    push: value => {\n      queue.push(value);\n    },\n    next: () => {\n      if (queue.length) {\n        return {\n          done: false,\n          value: queue.shift()\n        };\n      }\n\n      return iterator.next();\n    },\n\n    [symbol]() {\n      return this;\n    }\n\n  };\n}\n\nmodule.exports = peekableIterator;","map":null,"metadata":{},"sourceType":"script"}