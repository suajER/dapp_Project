{"ast":null,"code":"'use strict';\n/**\r\n * @typedef {{ [key: string]: any }} Extensions\r\n * @typedef {Error} Err\r\n * @property {string} message\r\n */\n\n/**\r\n *\r\n * @param {Error} obj\r\n * @param {Extensions} props\r\n * @returns {Error & Extensions}\r\n */\n\nfunction assign(obj, props) {\n  for (const key in props) {\n    Object.defineProperty(obj, key, {\n      value: props[key],\n      enumerable: true,\n      configurable: true\n    });\n  }\n\n  return obj;\n}\n/**\r\n *\r\n * @param {any} err - An Error\r\n * @param {string|Extensions} code - A string code or props to set on the error\r\n * @param {Extensions} [props] - Props to set on the error\r\n * @returns {Error & Extensions}\r\n */\n\n\nfunction createError(err, code, props) {\n  if (!err || typeof err === 'string') {\n    throw new TypeError('Please pass an Error to err-code');\n  }\n\n  if (!props) {\n    props = {};\n  }\n\n  if (typeof code === 'object') {\n    props = code;\n    code = '';\n  }\n\n  if (code) {\n    props.code = code;\n  }\n\n  try {\n    return assign(err, props);\n  } catch (_) {\n    props.message = err.message;\n    props.stack = err.stack;\n\n    const ErrClass = function () {};\n\n    ErrClass.prototype = Object.create(Object.getPrototypeOf(err)); // @ts-ignore\n\n    const output = assign(new ErrClass(), props);\n    return output;\n  }\n}\n\nmodule.exports = createError;","map":null,"metadata":{},"sourceType":"script"}