{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\n\nconst LOAD_BASE = name => Promise.reject(new Error(\"No base found for \\\"\".concat(name, \"\\\"\")));\n\nclass Multibases {\n  constructor(options) {\n    this._basesByName = {};\n    this._basesByPrefix = {};\n    this._loadBase = options.loadBase || LOAD_BASE;\n\n    for (const base of options.bases) {\n      this.addBase(base);\n    }\n  }\n\n  addBase(base) {\n    if (this._basesByName[base.name] || this._basesByPrefix[base.prefix]) {\n      throw new Error(\"Codec already exists for codec \\\"\".concat(base.name, \"\\\"\"));\n    }\n\n    this._basesByName[base.name] = base;\n    this._basesByPrefix[base.prefix] = base;\n  }\n\n  removeBase(base) {\n    delete this._basesByName[base.name];\n    delete this._basesByPrefix[base.prefix];\n  }\n\n  async getBase(nameOrPrefix) {\n    if (this._basesByName[nameOrPrefix]) {\n      return this._basesByName[nameOrPrefix];\n    }\n\n    if (this._basesByPrefix[nameOrPrefix]) {\n      return this._basesByPrefix[nameOrPrefix];\n    }\n\n    const base = await this._loadBase(nameOrPrefix);\n\n    if (this._basesByName[base.name] == null && this._basesByPrefix[base.prefix] == null) {\n      this.addBase(base);\n    }\n\n    return base;\n  }\n\n  listBases() {\n    return Object.values(this._basesByName);\n  }\n\n}\n\nexports.Multibases = Multibases;","map":null,"metadata":{},"sourceType":"script"}