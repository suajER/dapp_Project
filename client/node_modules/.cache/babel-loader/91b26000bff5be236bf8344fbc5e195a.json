{"ast":null,"code":"'use strict';\n\nvar _slicedToArray = require(\"C:\\\\Users\\\\DELL\\\\Desktop\\\\CS-dapp\\\\client\\\\node_modules\\\\@babel\\\\runtime/helpers/slicedToArray\");\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\n\nvar varint = require('./varint.js');\n\nvar digest = require('./hashes/digest.js');\n\nvar base58 = require('./bases/base58.js');\n\nvar base32 = require('./bases/base32.js');\n\nvar bytes = require('./bytes.js');\n\nclass CID {\n  constructor(version, code, multihash, bytes) {\n    this.code = code;\n    this.version = version;\n    this.multihash = multihash;\n    this.bytes = bytes;\n    this.byteOffset = bytes.byteOffset;\n    this.byteLength = bytes.byteLength;\n    this.asCID = this;\n    this._baseCache = new Map();\n    Object.defineProperties(this, {\n      byteOffset: hidden,\n      byteLength: hidden,\n      code: readonly,\n      version: readonly,\n      multihash: readonly,\n      bytes: readonly,\n      _baseCache: hidden,\n      asCID: hidden\n    });\n  }\n\n  toV0() {\n    switch (this.version) {\n      case 0:\n        {\n          return this;\n        }\n\n      default:\n        {\n          const code = this.code,\n                multihash = this.multihash;\n\n          if (code !== DAG_PB_CODE) {\n            throw new Error('Cannot convert a non dag-pb CID to CIDv0');\n          }\n\n          if (multihash.code !== SHA_256_CODE) {\n            throw new Error('Cannot convert non sha2-256 multihash CID to CIDv0');\n          }\n\n          return CID.createV0(multihash);\n        }\n    }\n  }\n\n  toV1() {\n    switch (this.version) {\n      case 0:\n        {\n          const _this$multihash = this.multihash,\n                code = _this$multihash.code,\n                digest$1 = _this$multihash.digest;\n          const multihash = digest.create(code, digest$1);\n          return CID.createV1(this.code, multihash);\n        }\n\n      case 1:\n        {\n          return this;\n        }\n\n      default:\n        {\n          throw Error(\"Can not convert CID version \".concat(this.version, \" to version 0. This is a bug please report\"));\n        }\n    }\n  }\n\n  equals(other) {\n    return other && this.code === other.code && this.version === other.version && digest.equals(this.multihash, other.multihash);\n  }\n\n  toString(base) {\n    const bytes = this.bytes,\n          version = this.version,\n          _baseCache = this._baseCache;\n\n    switch (version) {\n      case 0:\n        return toStringV0(bytes, _baseCache, base || base58.base58btc.encoder);\n\n      default:\n        return toStringV1(bytes, _baseCache, base || base32.base32.encoder);\n    }\n  }\n\n  toJSON() {\n    return {\n      code: this.code,\n      version: this.version,\n      hash: this.multihash.bytes\n    };\n  }\n\n  get [Symbol.toStringTag]() {\n    return 'CID';\n  }\n\n  [Symbol.for('nodejs.util.inspect.custom')]() {\n    return 'CID(' + this.toString() + ')';\n  }\n\n  static isCID(value) {\n    deprecate(/^0\\.0/, IS_CID_DEPRECATION);\n    return !!(value && (value[cidSymbol] || value.asCID === value));\n  }\n\n  get toBaseEncodedString() {\n    throw new Error('Deprecated, use .toString()');\n  }\n\n  get codec() {\n    throw new Error('\"codec\" property is deprecated, use integer \"code\" property instead');\n  }\n\n  get buffer() {\n    throw new Error('Deprecated .buffer property, use .bytes to get Uint8Array instead');\n  }\n\n  get multibaseName() {\n    throw new Error('\"multibaseName\" property is deprecated');\n  }\n\n  get prefix() {\n    throw new Error('\"prefix\" property is deprecated');\n  }\n\n  static asCID(value) {\n    if (value instanceof CID) {\n      return value;\n    } else if (value != null && value.asCID === value) {\n      const version = value.version,\n            code = value.code,\n            multihash = value.multihash,\n            bytes = value.bytes;\n      return new CID(version, code, multihash, bytes || encodeCID(version, code, multihash.bytes));\n    } else if (value != null && value[cidSymbol] === true) {\n      const version = value.version,\n            multihash = value.multihash,\n            code = value.code;\n      const digest$1 = digest.decode(multihash);\n      return CID.create(version, code, digest$1);\n    } else {\n      return null;\n    }\n  }\n\n  static create(version, code, digest) {\n    if (typeof code !== 'number') {\n      throw new Error('String codecs are no longer supported');\n    }\n\n    switch (version) {\n      case 0:\n        {\n          if (code !== DAG_PB_CODE) {\n            throw new Error(\"Version 0 CID must use dag-pb (code: \".concat(DAG_PB_CODE, \") block encoding\"));\n          } else {\n            return new CID(version, code, digest, digest.bytes);\n          }\n        }\n\n      case 1:\n        {\n          const bytes = encodeCID(version, code, digest.bytes);\n          return new CID(version, code, digest, bytes);\n        }\n\n      default:\n        {\n          throw new Error('Invalid version');\n        }\n    }\n  }\n\n  static createV0(digest) {\n    return CID.create(0, DAG_PB_CODE, digest);\n  }\n\n  static createV1(code, digest) {\n    return CID.create(1, code, digest);\n  }\n\n  static decode(bytes) {\n    const _CID$decodeFirst = CID.decodeFirst(bytes),\n          _CID$decodeFirst2 = _slicedToArray(_CID$decodeFirst, 2),\n          cid = _CID$decodeFirst2[0],\n          remainder = _CID$decodeFirst2[1];\n\n    if (remainder.length) {\n      throw new Error('Incorrect length');\n    }\n\n    return cid;\n  }\n\n  static decodeFirst(bytes$1) {\n    const specs = CID.inspectBytes(bytes$1);\n    const prefixSize = specs.size - specs.multihashSize;\n    const multihashBytes = bytes.coerce(bytes$1.subarray(prefixSize, prefixSize + specs.multihashSize));\n\n    if (multihashBytes.byteLength !== specs.multihashSize) {\n      throw new Error('Incorrect length');\n    }\n\n    const digestBytes = multihashBytes.subarray(specs.multihashSize - specs.digestSize);\n    const digest$1 = new digest.Digest(specs.multihashCode, specs.digestSize, digestBytes, multihashBytes);\n    const cid = specs.version === 0 ? CID.createV0(digest$1) : CID.createV1(specs.codec, digest$1);\n    return [cid, bytes$1.subarray(specs.size)];\n  }\n\n  static inspectBytes(initialBytes) {\n    let offset = 0;\n\n    const next = () => {\n      const _varint$decode = varint.decode(initialBytes.subarray(offset)),\n            _varint$decode2 = _slicedToArray(_varint$decode, 2),\n            i = _varint$decode2[0],\n            length = _varint$decode2[1];\n\n      offset += length;\n      return i;\n    };\n\n    let version = next();\n    let codec = DAG_PB_CODE;\n\n    if (version === 18) {\n      version = 0;\n      offset = 0;\n    } else if (version === 1) {\n      codec = next();\n    }\n\n    if (version !== 0 && version !== 1) {\n      throw new RangeError(\"Invalid CID version \".concat(version));\n    }\n\n    const prefixSize = offset;\n    const multihashCode = next();\n    const digestSize = next();\n    const size = offset + digestSize;\n    const multihashSize = size - prefixSize;\n    return {\n      version,\n      codec,\n      multihashCode,\n      digestSize,\n      multihashSize,\n      size\n    };\n  }\n\n  static parse(source, base) {\n    const _parseCIDtoBytes = parseCIDtoBytes(source, base),\n          _parseCIDtoBytes2 = _slicedToArray(_parseCIDtoBytes, 2),\n          prefix = _parseCIDtoBytes2[0],\n          bytes = _parseCIDtoBytes2[1];\n\n    const cid = CID.decode(bytes);\n\n    cid._baseCache.set(prefix, source);\n\n    return cid;\n  }\n\n}\n\nconst parseCIDtoBytes = (source, base) => {\n  switch (source[0]) {\n    case 'Q':\n      {\n        const decoder = base || base58.base58btc;\n        return [base58.base58btc.prefix, decoder.decode(\"\".concat(base58.base58btc.prefix).concat(source))];\n      }\n\n    case base58.base58btc.prefix:\n      {\n        const decoder = base || base58.base58btc;\n        return [base58.base58btc.prefix, decoder.decode(source)];\n      }\n\n    case base32.base32.prefix:\n      {\n        const decoder = base || base32.base32;\n        return [base32.base32.prefix, decoder.decode(source)];\n      }\n\n    default:\n      {\n        if (base == null) {\n          throw Error('To parse non base32 or base58btc encoded CID multibase decoder must be provided');\n        }\n\n        return [source[0], base.decode(source)];\n      }\n  }\n};\n\nconst toStringV0 = (bytes, cache, base) => {\n  const prefix = base.prefix;\n\n  if (prefix !== base58.base58btc.prefix) {\n    throw Error(\"Cannot string encode V0 in \".concat(base.name, \" encoding\"));\n  }\n\n  const cid = cache.get(prefix);\n\n  if (cid == null) {\n    const cid = base.encode(bytes).slice(1);\n    cache.set(prefix, cid);\n    return cid;\n  } else {\n    return cid;\n  }\n};\n\nconst toStringV1 = (bytes, cache, base) => {\n  const prefix = base.prefix;\n  const cid = cache.get(prefix);\n\n  if (cid == null) {\n    const cid = base.encode(bytes);\n    cache.set(prefix, cid);\n    return cid;\n  } else {\n    return cid;\n  }\n};\n\nconst DAG_PB_CODE = 112;\nconst SHA_256_CODE = 18;\n\nconst encodeCID = (version, code, multihash) => {\n  const codeOffset = varint.encodingLength(version);\n  const hashOffset = codeOffset + varint.encodingLength(code);\n  const bytes = new Uint8Array(hashOffset + multihash.byteLength);\n  varint.encodeTo(version, bytes, 0);\n  varint.encodeTo(code, bytes, codeOffset);\n  bytes.set(multihash, hashOffset);\n  return bytes;\n};\n\nconst cidSymbol = Symbol.for('@ipld/js-cid/CID');\nconst readonly = {\n  writable: false,\n  configurable: false,\n  enumerable: true\n};\nconst hidden = {\n  writable: false,\n  enumerable: false,\n  configurable: false\n};\nconst version = '0.0.0-dev';\n\nconst deprecate = (range, message) => {\n  if (range.test(version)) {\n    console.warn(message);\n  } else {\n    throw new Error(message);\n  }\n};\n\nconst IS_CID_DEPRECATION = \"CID.isCID(v) is deprecated and will be removed in the next major release.\\nFollowing code pattern:\\n\\nif (CID.isCID(value)) {\\n  doSomethingWithCID(value)\\n}\\n\\nIs replaced with:\\n\\nconst cid = CID.asCID(value)\\nif (cid) {\\n  // Make sure to use cid instead of value\\n  doSomethingWithCID(cid)\\n}\\n\";\nexports.CID = CID;","map":null,"metadata":{},"sourceType":"script"}