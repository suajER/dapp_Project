{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\n\nvar cid = require('multiformats/cid');\n\nvar configure = require('../lib/configure.js');\n\nvar multipartRequest = require('ipfs-core-utils/multipart-request');\n\nvar toUrlSearchParams = require('../lib/to-url-search-params.js');\n\nvar abortSignal = require('../lib/abort-signal.js');\n\nvar nativeAbortController = require('native-abort-controller');\n\nconst createPut = (codecs, options) => {\n  const fn = configure.configure(api => {\n    const put = async (dagNode, options = {}) => {\n      const settings = {\n        format: 'dag-cbor',\n        hashAlg: 'sha2-256',\n        inputEnc: 'raw',\n        ...options\n      };\n      const codec = await codecs.getCodec(settings.format);\n      const serialized = codec.encode(dagNode);\n      const controller = new nativeAbortController.AbortController();\n      const signal = abortSignal.abortSignal(controller.signal, settings.signal);\n      const res = await api.post('dag/put', {\n        timeout: settings.timeout,\n        signal,\n        searchParams: toUrlSearchParams.toUrlSearchParams(settings),\n        ...(await multipartRequest.multipartRequest([serialized], controller, settings.headers))\n      });\n      const data = await res.json();\n      return cid.CID.parse(data.Cid['/']);\n    };\n\n    return put;\n  });\n  return fn(options);\n};\n\nexports.createPut = createPut;","map":null,"metadata":{},"sourceType":"script"}