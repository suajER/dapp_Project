{"ast":null,"code":"import _objectWithoutProperties from \"C:\\\\Users\\\\DELL\\\\Desktop\\\\CS-dapp\\\\client\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectWithoutProperties\";\nimport classNames from 'classnames';\nimport all from 'prop-types-extra/lib/all';\nimport * as React from 'react';\nimport { useContext } from 'react';\nimport { useUncontrolled } from 'uncontrollable';\nimport BaseNav from '@restart/ui/Nav';\nimport { useBootstrapPrefix } from './ThemeProvider';\nimport NavbarContext from './NavbarContext';\nimport CardHeaderContext from './CardHeaderContext';\nimport NavItem from './NavItem';\nimport NavLink from './NavLink';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst defaultProps = {\n  justify: false,\n  fill: false\n};\nconst Nav =\n/*#__PURE__*/\nReact.forwardRef((uncontrolledProps, ref) => {\n  const _useUncontrolled = useUncontrolled(uncontrolledProps, {\n    activeKey: 'onSelect'\n  }),\n        _useUncontrolled$as = _useUncontrolled.as,\n        as = _useUncontrolled$as === void 0 ? 'div' : _useUncontrolled$as,\n        initialBsPrefix = _useUncontrolled.bsPrefix,\n        variant = _useUncontrolled.variant,\n        fill = _useUncontrolled.fill,\n        justify = _useUncontrolled.justify,\n        navbar = _useUncontrolled.navbar,\n        navbarScroll = _useUncontrolled.navbarScroll,\n        className = _useUncontrolled.className,\n        activeKey = _useUncontrolled.activeKey,\n        props = _objectWithoutProperties(_useUncontrolled, [\"as\", \"bsPrefix\", \"variant\", \"fill\", \"justify\", \"navbar\", \"navbarScroll\", \"className\", \"activeKey\"]);\n\n  const bsPrefix = useBootstrapPrefix(initialBsPrefix, 'nav');\n  let navbarBsPrefix;\n  let cardHeaderBsPrefix;\n  let isNavbar = false;\n  const navbarContext = useContext(NavbarContext);\n  const cardHeaderContext = useContext(CardHeaderContext);\n\n  if (navbarContext) {\n    navbarBsPrefix = navbarContext.bsPrefix;\n    isNavbar = navbar == null ? true : navbar;\n  } else if (cardHeaderContext) {\n    cardHeaderBsPrefix = cardHeaderContext.cardHeaderBsPrefix;\n  }\n\n  return (\n    /*#__PURE__*/\n    _jsx(BaseNav, {\n      as: as,\n      ref: ref,\n      activeKey: activeKey,\n      className: classNames(className, {\n        [bsPrefix]: !isNavbar,\n        [\"\".concat(navbarBsPrefix, \"-nav\")]: isNavbar,\n        [\"\".concat(navbarBsPrefix, \"-nav-scroll\")]: isNavbar && navbarScroll,\n        [\"\".concat(cardHeaderBsPrefix, \"-\").concat(variant)]: !!cardHeaderBsPrefix,\n        [\"\".concat(bsPrefix, \"-\").concat(variant)]: !!variant,\n        [\"\".concat(bsPrefix, \"-fill\")]: fill,\n        [\"\".concat(bsPrefix, \"-justified\")]: justify\n      }),\n      ...props\n    })\n  );\n});\nNav.displayName = 'Nav';\nNav.defaultProps = defaultProps;\nexport default Object.assign(Nav, {\n  Item: NavItem,\n  Link: NavLink\n});","map":null,"metadata":{},"sourceType":"module"}