{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\n\nvar nativeAbortController = require('native-abort-controller');\n\nclass SubscriptionTracker {\n  constructor() {\n    this._subs = new Map();\n  }\n\n  subscribe(topic, handler, signal) {\n    const topicSubs = this._subs.get(topic) || [];\n\n    if (topicSubs.find(s => s.handler === handler)) {\n      throw new Error(\"Already subscribed to \".concat(topic, \" with this handler\"));\n    }\n\n    const controller = new nativeAbortController.AbortController();\n\n    this._subs.set(topic, [{\n      handler,\n      controller\n    }].concat(topicSubs));\n\n    if (signal) {\n      signal.addEventListener('abort', () => this.unsubscribe(topic, handler));\n    }\n\n    return controller.signal;\n  }\n\n  unsubscribe(topic, handler) {\n    const subs = this._subs.get(topic) || [];\n    let unsubs;\n\n    if (handler) {\n      this._subs.set(topic, subs.filter(s => s.handler !== handler));\n\n      unsubs = subs.filter(s => s.handler === handler);\n    } else {\n      this._subs.set(topic, []);\n\n      unsubs = subs;\n    }\n\n    if (!(this._subs.get(topic) || []).length) {\n      this._subs.delete(topic);\n    }\n\n    unsubs.forEach(s => s.controller.abort());\n  }\n\n}\n\nexports.SubscriptionTracker = SubscriptionTracker;","map":null,"metadata":{},"sourceType":"script"}