{"ast":null,"code":"import _objectWithoutProperties from \"D:\\\\test\\\\client\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectWithoutProperties\";\nimport classNames from 'classnames';\nimport * as React from 'react';\nimport { useCallback, useMemo } from 'react';\nimport SelectableContext from '@restart/ui/SelectableContext';\nimport { useUncontrolled } from 'uncontrollable';\nimport createWithBsPrefix from './createWithBsPrefix';\nimport NavbarBrand from './NavbarBrand';\nimport NavbarCollapse from './NavbarCollapse';\nimport NavbarToggle from './NavbarToggle';\nimport NavbarOffcanvas from './NavbarOffcanvas';\nimport { useBootstrapPrefix } from './ThemeProvider';\nimport NavbarContext from './NavbarContext';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst NavbarText = createWithBsPrefix('navbar-text', {\n  Component: 'span'\n});\nconst defaultProps = {\n  expand: true,\n  variant: 'light',\n  collapseOnSelect: false\n};\nconst Navbar =\n/*#__PURE__*/\nReact.forwardRef((props, ref) => {\n  const _useUncontrolled = useUncontrolled(props, {\n    expanded: 'onToggle'\n  }),\n        initialBsPrefix = _useUncontrolled.bsPrefix,\n        expand = _useUncontrolled.expand,\n        variant = _useUncontrolled.variant,\n        bg = _useUncontrolled.bg,\n        fixed = _useUncontrolled.fixed,\n        sticky = _useUncontrolled.sticky,\n        className = _useUncontrolled.className,\n        _useUncontrolled$as = _useUncontrolled.as,\n        Component = _useUncontrolled$as === void 0 ? 'nav' : _useUncontrolled$as,\n        expanded = _useUncontrolled.expanded,\n        onToggle = _useUncontrolled.onToggle,\n        onSelect = _useUncontrolled.onSelect,\n        collapseOnSelect = _useUncontrolled.collapseOnSelect,\n        controlledProps = _objectWithoutProperties(_useUncontrolled, [\"bsPrefix\", \"expand\", \"variant\", \"bg\", \"fixed\", \"sticky\", \"className\", \"as\", \"expanded\", \"onToggle\", \"onSelect\", \"collapseOnSelect\"]);\n\n  const bsPrefix = useBootstrapPrefix(initialBsPrefix, 'navbar');\n  const handleCollapse = useCallback((...args) => {\n    onSelect == null ? void 0 : onSelect(...args);\n\n    if (collapseOnSelect && expanded) {\n      onToggle == null ? void 0 : onToggle(false);\n    }\n  }, [onSelect, collapseOnSelect, expanded, onToggle]); // will result in some false positives but that seems better\n  // than false negatives. strict `undefined` check allows explicit\n  // \"nulling\" of the role if the user really doesn't want one\n\n  if (controlledProps.role === undefined && Component !== 'nav') {\n    controlledProps.role = 'navigation';\n  }\n\n  let expandClass = \"\".concat(bsPrefix, \"-expand\");\n  if (typeof expand === 'string') expandClass = \"\".concat(expandClass, \"-\").concat(expand);\n  const navbarContext = useMemo(() => ({\n    onToggle: () => onToggle == null ? void 0 : onToggle(!expanded),\n    bsPrefix,\n    expanded: !!expanded\n  }), [bsPrefix, expanded, onToggle]);\n  return (\n    /*#__PURE__*/\n    _jsx(NavbarContext.Provider, {\n      value: navbarContext,\n      children:\n      /*#__PURE__*/\n      _jsx(SelectableContext.Provider, {\n        value: handleCollapse,\n        children:\n        /*#__PURE__*/\n        _jsx(Component, {\n          ref: ref,\n          ...controlledProps,\n          className: classNames(className, bsPrefix, expand && expandClass, variant && \"\".concat(bsPrefix, \"-\").concat(variant), bg && \"bg-\".concat(bg), sticky && \"sticky-\".concat(sticky), fixed && \"fixed-\".concat(fixed))\n        })\n      })\n    })\n  );\n});\nNavbar.defaultProps = defaultProps;\nNavbar.displayName = 'Navbar';\nexport default Object.assign(Navbar, {\n  Brand: NavbarBrand,\n  Collapse: NavbarCollapse,\n  Offcanvas: NavbarOffcanvas,\n  Text: NavbarText,\n  Toggle: NavbarToggle\n});","map":null,"metadata":{},"sourceType":"module"}