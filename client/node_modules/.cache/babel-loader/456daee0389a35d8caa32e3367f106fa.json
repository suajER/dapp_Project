{"ast":null,"code":"var _jsxFileName = \"D:\\\\reactDAPP\\\\client\\\\src\\\\App.js\";\nimport React, { Component } from \"react\";\nimport Authentication from \"./contracts/Authentication.json\";\nimport getWeb3 from \"./getWeb3\";\nimport dashboard from \"./components/dashboard\";\nimport tender from \"./dashComponents/tender\";\nimport \"./App.css\";\n\nclass App extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      cid: null,\n      address: null,\n      web3: null,\n      accounts: null,\n      contract: null\n    };\n\n    this.componentDidMount = async () => {\n      try {\n        // Get network provider and web3 instance.\n        const web3 = await getWeb3(); // Use web3 to get the user's accounts.\n\n        const accounts = await web3.eth.getAccounts(); // Get the contract instance.\n\n        const networkId = await web3.eth.net.getId();\n        const deployedNetwork = Authentication.networks[networkId];\n        const contract1 = new web3.eth.Contract(Authentication.abi, deployedNetwork && deployedNetwork.address); // Set web3, accounts, and contract to the state, and then proceed with an\n        // example of interacting with the contract's methods.\n\n        this.setState({\n          web3,\n          accounts,\n          contract: contract1\n        });\n      } catch (error) {\n        // Catch any errors for any of the above operations.\n        alert(\"Failed to load web3, accounts, or contract. Check console for details.\");\n        console.error(error);\n      }\n    };\n  }\n\n  render() {\n    if (!this.state.web3) {\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 43\n        },\n        __self: this\n      }, \"Loading Web3, accounts, and contract...\");\n    }\n\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 46\n      },\n      __self: this\n    });\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["D:/reactDAPP/client/src/App.js"],"names":["React","Component","Authentication","getWeb3","dashboard","tender","App","state","cid","address","web3","accounts","contract","componentDidMount","eth","getAccounts","networkId","net","getId","deployedNetwork","networks","contract1","Contract","abi","setState","error","alert","console","render"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,cAAP,MAA2B,iCAA3B;AACA,OAAOC,OAAP,MAAoB,WAApB;AACA,OAAOC,SAAP,MAAsB,wBAAtB;AACA,OAAOC,MAAP,MAAmB,yBAAnB;AAEA,OAAO,WAAP;;AAEA,MAAMC,GAAN,SAAkBL,SAAlB,CAA4B;AAAA;AAAA;AAAA,SAC1BM,KAD0B,GAClB;AAAEC,MAAAA,GAAG,EAAE,IAAP;AAAYC,MAAAA,OAAO,EAAE,IAArB;AAA2BC,MAAAA,IAAI,EAAE,IAAjC;AAAuCC,MAAAA,QAAQ,EAAE,IAAjD;AAAuDC,MAAAA,QAAQ,EAAE;AAAjE,KADkB;;AAAA,SAG1BC,iBAH0B,GAGN,YAAY;AAC9B,UAAI;AACF;AACA,cAAMH,IAAI,GAAG,MAAMP,OAAO,EAA1B,CAFE,CAIF;;AACA,cAAMQ,QAAQ,GAAG,MAAMD,IAAI,CAACI,GAAL,CAASC,WAAT,EAAvB,CALE,CAOF;;AACA,cAAMC,SAAS,GAAG,MAAMN,IAAI,CAACI,GAAL,CAASG,GAAT,CAAaC,KAAb,EAAxB;AACA,cAAMC,eAAe,GAAGjB,cAAc,CAACkB,QAAf,CAAwBJ,SAAxB,CAAxB;AACA,cAAMK,SAAS,GAAG,IAAIX,IAAI,CAACI,GAAL,CAASQ,QAAb,CAChBpB,cAAc,CAACqB,GADC,EAEhBJ,eAAe,IAAIA,eAAe,CAACV,OAFnB,CAAlB,CAVE,CAeF;AACA;;AACA,aAAKe,QAAL,CAAc;AAAEd,UAAAA,IAAF;AAAQC,UAAAA,QAAR;AAAkBC,UAAAA,QAAQ,EAAES;AAA5B,SAAd;AACD,OAlBD,CAkBE,OAAOI,KAAP,EAAc;AACd;AACAC,QAAAA,KAAK,0EAAL;AAGAC,QAAAA,OAAO,CAACF,KAAR,CAAcA,KAAd;AACD;AACF,KA7ByB;AAAA;;AAgC1BG,EAAAA,MAAM,GAAG;AACP,QAAI,CAAC,KAAKrB,KAAL,CAAWG,IAAhB,EAAsB;AACpB,aAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mDAAP;AACD;;AACD,WACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF;AAKD;;AAzCyB;;AA4C5B,eAAeJ,GAAf","sourcesContent":["import React, { Component } from \"react\";\nimport Authentication from \"./contracts/Authentication.json\";\nimport getWeb3 from \"./getWeb3\";\nimport dashboard from \"./components/dashboard\";\nimport tender from \"./dashComponents/tender\";\n\nimport \"./App.css\";\n\nclass App extends Component {\n  state = { cid: null,address: null, web3: null, accounts: null, contract: null };\n\n  componentDidMount = async () => {\n    try {\n      // Get network provider and web3 instance.\n      const web3 = await getWeb3();\n\n      // Use web3 to get the user's accounts.\n      const accounts = await web3.eth.getAccounts();\n\n      // Get the contract instance.\n      const networkId = await web3.eth.net.getId();\n      const deployedNetwork = Authentication.networks[networkId];\n      const contract1 = new web3.eth.Contract(\n        Authentication.abi,\n        deployedNetwork && deployedNetwork.address,\n      );\n\n      // Set web3, accounts, and contract to the state, and then proceed with an\n      // example of interacting with the contract's methods.\n      this.setState({ web3, accounts, contract: contract1 });\n    } catch (error) {\n      // Catch any errors for any of the above operations.\n      alert(\n        `Failed to load web3, accounts, or contract. Check console for details.`,\n      );\n      console.error(error);\n    }\n  };\n\n\n  render() {\n    if (!this.state.web3) {\n      return <div>Loading Web3, accounts, and contract...</div>;\n    }\n    return (\n      <div >\n      \n      </div>\n    );\n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}