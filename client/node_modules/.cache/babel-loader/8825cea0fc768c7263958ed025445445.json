{"ast":null,"code":"import _objectWithoutProperties from \"D:\\\\test\\\\client\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectWithoutProperties\";\nimport classNames from 'classnames';\nimport * as React from 'react';\nimport { useContext, useMemo } from 'react';\nimport BaseDropdown from '@restart/ui/Dropdown';\nimport { useUncontrolled } from 'uncontrollable';\nimport useEventCallback from '@restart/hooks/useEventCallback';\nimport DropdownContext from './DropdownContext';\nimport DropdownItem from './DropdownItem';\nimport DropdownMenu, { getDropdownMenuPlacement } from './DropdownMenu';\nimport DropdownToggle from './DropdownToggle';\nimport InputGroupContext from './InputGroupContext';\nimport { useBootstrapPrefix, useIsRTL } from './ThemeProvider';\nimport createWithBsPrefix from './createWithBsPrefix';\nimport { alignPropType } from './types';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst DropdownHeader = createWithBsPrefix('dropdown-header', {\n  defaultProps: {\n    role: 'heading'\n  }\n});\nconst DropdownDivider = createWithBsPrefix('dropdown-divider', {\n  Component: 'hr',\n  defaultProps: {\n    role: 'separator'\n  }\n});\nconst DropdownItemText = createWithBsPrefix('dropdown-item-text', {\n  Component: 'span'\n});\nconst defaultProps = {\n  navbar: false,\n  align: 'start',\n  autoClose: true\n};\nconst Dropdown =\n/*#__PURE__*/\nReact.forwardRef((pProps, ref) => {\n  const _useUncontrolled = useUncontrolled(pProps, {\n    show: 'onToggle'\n  }),\n        bsPrefix = _useUncontrolled.bsPrefix,\n        drop = _useUncontrolled.drop,\n        show = _useUncontrolled.show,\n        className = _useUncontrolled.className,\n        align = _useUncontrolled.align,\n        onSelect = _useUncontrolled.onSelect,\n        onToggle = _useUncontrolled.onToggle,\n        focusFirstItemOnShow = _useUncontrolled.focusFirstItemOnShow,\n        _useUncontrolled$as = _useUncontrolled.as,\n        Component = _useUncontrolled$as === void 0 ? 'div' : _useUncontrolled$as,\n        _4 = _useUncontrolled.navbar,\n        autoClose = _useUncontrolled.autoClose,\n        props = _objectWithoutProperties(_useUncontrolled, [\"bsPrefix\", \"drop\", \"show\", \"className\", \"align\", \"onSelect\", \"onToggle\", \"focusFirstItemOnShow\", \"as\", \"navbar\", \"autoClose\"]);\n\n  const isInputGroup = useContext(InputGroupContext);\n  const prefix = useBootstrapPrefix(bsPrefix, 'dropdown');\n  const isRTL = useIsRTL();\n\n  const isClosingPermitted = source => {\n    // autoClose=false only permits close on button click\n    if (autoClose === false) return source === 'click'; // autoClose=inside doesn't permit close on rootClose\n\n    if (autoClose === 'inside') return source !== 'rootClose'; // autoClose=outside doesn't permit close on select\n\n    if (autoClose === 'outside') return source !== 'select';\n    return true;\n  };\n\n  const handleToggle = useEventCallback((nextShow, meta) => {\n    if (meta.originalEvent.currentTarget === document && (meta.source !== 'keydown' || meta.originalEvent.key === 'Escape')) meta.source = 'rootClose';\n    if (isClosingPermitted(meta.source)) onToggle == null ? void 0 : onToggle(nextShow, meta);\n  });\n  const alignEnd = align === 'end';\n  const placement = getDropdownMenuPlacement(alignEnd, drop, isRTL);\n  const contextValue = useMemo(() => ({\n    align,\n    drop,\n    isRTL\n  }), [align, drop, isRTL]);\n  return (\n    /*#__PURE__*/\n    _jsx(DropdownContext.Provider, {\n      value: contextValue,\n      children:\n      /*#__PURE__*/\n      _jsx(BaseDropdown, {\n        placement: placement,\n        show: show,\n        onSelect: onSelect,\n        onToggle: handleToggle,\n        focusFirstItemOnShow: focusFirstItemOnShow,\n        itemSelector: \".\".concat(prefix, \"-item:not(.disabled):not(:disabled)\"),\n        children: isInputGroup ? props.children :\n        /*#__PURE__*/\n        _jsx(Component, { ...props,\n          ref: ref,\n          className: classNames(className, show && 'show', (!drop || drop === 'down') && prefix, drop === 'up' && 'dropup', drop === 'end' && 'dropend', drop === 'start' && 'dropstart')\n        })\n      })\n    })\n  );\n});\nDropdown.displayName = 'Dropdown';\nDropdown.defaultProps = defaultProps;\nexport default Object.assign(Dropdown, {\n  Toggle: DropdownToggle,\n  Menu: DropdownMenu,\n  Item: DropdownItem,\n  ItemText: DropdownItemText,\n  Divider: DropdownDivider,\n  Header: DropdownHeader\n});","map":null,"metadata":{},"sourceType":"module"}